
i2c_Mini_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d18  08003d18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d20  08003d20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08003d98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003d98  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f82  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000179f  00000000  00000000  0002901a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010703  00000000  00000000  0002b988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000825c  00000000  00000000  0003c08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064fc8  00000000  00000000  000442e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a92af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  000a932c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c48 	.word	0x08003c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c48 	.word	0x08003c48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 fb13 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f891 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f975 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049e:	f000 f943 	bl	8000728 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004a2:	f000 f901 	bl	80006a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int errorsTX=0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
  int errorsRX=0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
  TxData=0;
 80004ae:	4b3a      	ldr	r3, [pc, #232]	; (8000598 <main+0x10c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxData--;
 80004b4:	4b38      	ldr	r3, [pc, #224]	; (8000598 <main+0x10c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b36      	ldr	r3, [pc, #216]	; (8000598 <main+0x10c>)
 80004be:	701a      	strb	r2, [r3, #0]
	  rel=HAL_I2C_Slave_Receive(&hi2c1, &RxData, 1, 10);
 80004c0:	4936      	ldr	r1, [pc, #216]	; (800059c <main+0x110>)
 80004c2:	4837      	ldr	r0, [pc, #220]	; (80005a0 <main+0x114>)
 80004c4:	230a      	movs	r3, #10
 80004c6:	2201      	movs	r2, #1
 80004c8:	f001 f892 	bl	80015f0 <HAL_I2C_Slave_Receive>
 80004cc:	0003      	movs	r3, r0
 80004ce:	001a      	movs	r2, r3
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <main+0x118>)
 80004d2:	701a      	strb	r2, [r3, #0]
	  if(rel==HAL_OK){
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <main+0x118>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d115      	bne.n	8000508 <main+0x7c>
		  sprintf(str, "RD %8d\r\n", RxData);
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <main+0x110>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	001a      	movs	r2, r3
 80004e2:	4931      	ldr	r1, [pc, #196]	; (80005a8 <main+0x11c>)
 80004e4:	4b31      	ldr	r3, [pc, #196]	; (80005ac <main+0x120>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 ffa6 	bl	8003438 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)(&str),13, 100);
 80004ec:	492f      	ldr	r1, [pc, #188]	; (80005ac <main+0x120>)
 80004ee:	4830      	ldr	r0, [pc, #192]	; (80005b0 <main+0x124>)
 80004f0:	2364      	movs	r3, #100	; 0x64
 80004f2:	220d      	movs	r2, #13
 80004f4:	f002 fae8 	bl	8002ac8 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <main+0x128>)
 80004fa:	2108      	movs	r1, #8
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fe80 	bl	8001202 <HAL_GPIO_TogglePin>
		  errorsTX=0;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	e002      	b.n	800050e <main+0x82>
	  }else{
		  errorsTX++;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	607b      	str	r3, [r7, #4]
	  	  }
	  rel=HAL_I2C_Slave_Transmit(&hi2c1, &TxData, 1, 10);
 800050e:	4922      	ldr	r1, [pc, #136]	; (8000598 <main+0x10c>)
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <main+0x114>)
 8000512:	230a      	movs	r3, #10
 8000514:	2201      	movs	r2, #1
 8000516:	f000 ff55 	bl	80013c4 <HAL_I2C_Slave_Transmit>
 800051a:	0003      	movs	r3, r0
 800051c:	001a      	movs	r2, r3
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <main+0x118>)
 8000520:	701a      	strb	r2, [r3, #0]
	  if(rel==HAL_OK){
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <main+0x118>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d115      	bne.n	8000556 <main+0xca>
		  sprintf(str, "TD %8d\r\n", TxData);
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <main+0x10c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	001a      	movs	r2, r3
 8000530:	4921      	ldr	r1, [pc, #132]	; (80005b8 <main+0x12c>)
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <main+0x120>)
 8000534:	0018      	movs	r0, r3
 8000536:	f002 ff7f 	bl	8003438 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)(&str),13, 100);
 800053a:	491c      	ldr	r1, [pc, #112]	; (80005ac <main+0x120>)
 800053c:	481c      	ldr	r0, [pc, #112]	; (80005b0 <main+0x124>)
 800053e:	2364      	movs	r3, #100	; 0x64
 8000540:	220d      	movs	r2, #13
 8000542:	f002 fac1 	bl	8002ac8 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <main+0x128>)
 8000548:	2108      	movs	r1, #8
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fe59 	bl	8001202 <HAL_GPIO_TogglePin>
		  errorsRX=0;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	e002      	b.n	800055c <main+0xd0>
	  }else{
		  errorsRX++;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	603b      	str	r3, [r7, #0]
	  	  }
	  if(errorsTX>3){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b03      	cmp	r3, #3
 8000560:	dd09      	ble.n	8000576 <main+0xea>
	  			  HAL_I2C_DeInit(&hi2c1);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x114>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fefd 	bl	8001364 <HAL_I2C_DeInit>

	  			  HAL_I2C_Init(&hi2c1);
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0x114>)
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fe63 	bl	8001238 <HAL_I2C_Init>
	  			  errorsTX=0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
	  		  }
	  		  if(errorsRX>3){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b03      	cmp	r3, #3
 800057a:	dd09      	ble.n	8000590 <main+0x104>
	  			  HAL_I2C_DeInit(&hi2c1);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <main+0x114>)
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fef0 	bl	8001364 <HAL_I2C_DeInit>
	  			  HAL_I2C_Init(&hi2c1);
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <main+0x114>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fe56 	bl	8001238 <HAL_I2C_Init>

	  			  errorsRX=0;
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
	  		  }
	  		HAL_Delay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f000 fb03 	bl	8000b9c <HAL_Delay>
	  TxData--;
 8000596:	e78d      	b.n	80004b4 <main+0x28>
 8000598:	200000e5 	.word	0x200000e5
 800059c:	200000e6 	.word	0x200000e6
 80005a0:	20000098 	.word	0x20000098
 80005a4:	200000e4 	.word	0x200000e4
 80005a8:	08003c60 	.word	0x08003c60
 80005ac:	2000016c 	.word	0x2000016c
 80005b0:	200000e8 	.word	0x200000e8
 80005b4:	50000400 	.word	0x50000400
 80005b8:	08003c6c 	.word	0x08003c6c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b099      	sub	sp, #100	; 0x64
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	242c      	movs	r4, #44	; 0x2c
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2334      	movs	r3, #52	; 0x34
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 ff2b 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	2318      	movs	r3, #24
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f002 ff23 	bl	8003428 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e2:	003b      	movs	r3, r7
 80005e4:	0018      	movs	r0, r3
 80005e6:	2318      	movs	r3, #24
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 ff1c 	bl	8003428 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <SystemClock_Config+0xe4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <SystemClock_Config+0xe8>)
 80005f6:	401a      	ands	r2, r3
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xe4>)
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	0109      	lsls	r1, r1, #4
 80005fe:	430a      	orrs	r2, r1
 8000600:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2210      	movs	r2, #16
 8000614:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2202      	movs	r2, #2
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	02d2      	lsls	r2, r2, #11
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	03d2      	lsls	r2, r2, #15
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	187b      	adds	r3, r7, r1
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fb2b 	bl	8001c90 <HAL_RCC_OscConfig>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800063e:	f000 f8f3 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	2118      	movs	r1, #24
 8000644:	187b      	adds	r3, r7, r1
 8000646:	220f      	movs	r2, #15
 8000648:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2101      	movs	r1, #1
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fe92 	bl	8002390 <HAL_RCC_ClockConfig>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000670:	f000 f8da 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000674:	003b      	movs	r3, r7
 8000676:	220a      	movs	r2, #10
 8000678:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f002 f8a1 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000692:	f000 f8c9 	bl	8000828 <Error_Handler>
  }
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b019      	add	sp, #100	; 0x64
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40007000 	.word	0x40007000
 80006a4:	ffffe7ff 	.word	0xffffe7ff

080006a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_I2C1_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_I2C1_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_I2C1_Init+0x74>)
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <MX_I2C1_Init+0x7c>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 18;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_I2C1_Init+0x74>)
 80006ba:	2212      	movs	r2, #18
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_I2C1_Init+0x74>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x74>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fda7 	bl	8001238 <HAL_I2C_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ee:	f000 f89b 	bl	8000828 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x74>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fa32 	bl	8001b60 <HAL_I2CEx_ConfigAnalogFilter>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000700:	f000 f892 	bl	8000828 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_I2C1_Init+0x74>)
 8000706:	2100      	movs	r1, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fa75 	bl	8001bf8 <HAL_I2CEx_ConfigDigitalFilter>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 f889 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000098 	.word	0x20000098
 8000720:	40005400 	.word	0x40005400
 8000724:	00707cbb 	.word	0x00707cbb

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART2_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000734:	22e1      	movs	r2, #225	; 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f957 	bl	8002a20 <HAL_UART_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f857 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000e8 	.word	0x200000e8
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	240c      	movs	r4, #12
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 fe45 	bl	8003428 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_GPIO_Init+0x98>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0x98>)
 80007a4:	2104      	movs	r1, #4
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0x98>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2204      	movs	r2, #4
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0x98>)
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0x98>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_GPIO_Init+0x98>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_GPIO_Init+0x98>)
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_GPIO_Init+0x98>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0x98>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	2108      	movs	r1, #8
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fceb 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2208      	movs	r2, #8
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800080c:	187b      	adds	r3, r7, r1
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <MX_GPIO_Init+0x9c>)
 8000810:	0019      	movs	r1, r3
 8000812:	0010      	movs	r0, r2
 8000814:	f000 fa98 	bl	8000d48 <HAL_GPIO_Init>

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b009      	add	sp, #36	; 0x24
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	50000400 	.word	0x50000400

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082e:	e7fe      	b.n	800082e <Error_Handler+0x6>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_MspInit+0x24>)
 8000836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x24>)
 800083a:	2101      	movs	r1, #1
 800083c:	430a      	orrs	r2, r1
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_MspInit+0x24>)
 8000842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_MspInit+0x24>)
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	0549      	lsls	r1, r1, #21
 800084a:	430a      	orrs	r2, r1
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	230c      	movs	r3, #12
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f002 fddc 	bl	8003428 <memset>
  if(hi2c->Instance==I2C1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_I2C_MspInit+0x80>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12a      	bne.n	80008d0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_I2C_MspInit+0x84>)
 800087c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000892:	210c      	movs	r1, #12
 8000894:	187b      	adds	r3, r7, r1
 8000896:	22c0      	movs	r2, #192	; 0xc0
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2212      	movs	r2, #18
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2203      	movs	r2, #3
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	187a      	adds	r2, r7, r1
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fa43 	bl	8000d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_I2C_MspInit+0x84>)
 80008c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_I2C_MspInit+0x84>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0389      	lsls	r1, r1, #14
 80008cc:	430a      	orrs	r2, r1
 80008ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b008      	add	sp, #32
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_I2C_MspDeInit+0x48>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d115      	bne.n	800091e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_I2C_MspDeInit+0x4c>)
 80008f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_I2C_MspDeInit+0x4c>)
 80008f8:	490d      	ldr	r1, [pc, #52]	; (8000930 <HAL_I2C_MspDeInit+0x50>)
 80008fa:	400a      	ands	r2, r1
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	009a      	lsls	r2, r3, #2
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fb8b 	bl	8001024 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	00da      	lsls	r2, r3, #3
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fb83 	bl	8001024 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40005400 	.word	0x40005400
 800092c:	40021000 	.word	0x40021000
 8000930:	ffdfffff 	.word	0xffdfffff

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	230c      	movs	r3, #12
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	0018      	movs	r0, r3
 8000942:	2314      	movs	r3, #20
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f002 fd6e 	bl	8003428 <memset>
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d129      	bne.n	80009aa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x84>)
 8000958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x84>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0289      	lsls	r1, r1, #10
 8000960:	430a      	orrs	r2, r1
 8000962:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0x84>)
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_MspInit+0x84>)
 800096a:	2101      	movs	r1, #1
 800096c:	430a      	orrs	r2, r1
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0x84>)
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	2201      	movs	r2, #1
 8000976:	4013      	ands	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800097c:	210c      	movs	r1, #12
 800097e:	187b      	adds	r3, r7, r1
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2202      	movs	r2, #2
 8000988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2203      	movs	r2, #3
 8000994:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2204      	movs	r2, #4
 800099a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	187a      	adds	r2, r7, r1
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 f9cf 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b008      	add	sp, #32
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	00008004 	.word	0x00008004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f8be 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	18d3      	adds	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f002 fcd8 	bl	80033d4 <__errno>
 8000a24:	0003      	movs	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	18d2      	adds	r2, r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b006      	add	sp, #24
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20002000 	.word	0x20002000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	20000198 	.word	0x20000198

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a92:	f7ff ffe3 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fca3 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fcf7 	bl	800048c <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
   ldr   r0, =_estack
 8000aa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aac:	08003d28 	.word	0x08003d28
  ldr r2, =_sbss
 8000ab0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ab4:	20000194 	.word	0x20000194

08000ab8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_COMP_IRQHandler>
	...

08000abc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_Init+0x3c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Init+0x3c>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 f811 	bl	8000afc <HAL_InitTick>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e001      	b.n	8000aea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae6:	f7ff fea3 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_InitTick+0x60>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	23fa      	movs	r3, #250	; 0xfa
 8000b10:	0098      	lsls	r0, r3, #2
 8000b12:	f7ff faf9 	bl	8000108 <__udivsi3>
 8000b16:	0003      	movs	r3, r0
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff faf4 	bl	8000108 <__udivsi3>
 8000b20:	0003      	movs	r3, r0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f903 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e00f      	b.n	8000b50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d80b      	bhi.n	8000b4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 f8e0 	bl	8000d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_InitTick+0x64>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x20>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	18d2      	adds	r2, r2, r3
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_IncTick+0x20>)
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000018c 	.word	0x2000018c

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_GetTick+0x10>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	2000018c 	.word	0x2000018c

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff fff0 	bl	8000b88 <HAL_GetTick>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_Delay+0x40>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001a      	movs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	189b      	adds	r3, r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	f7ff ffe0 	bl	8000b88 <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b004      	add	sp, #16
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	; 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	; 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <SysTick_Config+0x40>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d901      	bls.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e010      	b.n	8000cf4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <SysTick_Config+0x44>)
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	3a01      	subs	r2, #1
 8000cd8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	425b      	negs	r3, r3
 8000cde:	2103      	movs	r1, #3
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff7d 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SysTick_Config+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x44>)
 8000cee:	2207      	movs	r2, #7
 8000cf0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	00ffffff 	.word	0x00ffffff
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ffbf 	bl	8000cbc <SysTick_Config>
 8000d3e:	0003      	movs	r3, r0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d5e:	e149      	b.n	8000ff4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x30>
 8000d76:	e13a      	b.n	8000fee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d00b      	beq.n	8000d98 <HAL_GPIO_Init+0x50>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8c:	2b11      	cmp	r3, #17
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	43da      	mvns	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	409a      	lsls	r2, r3
 8000dba:	0013      	movs	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	2201      	movs	r2, #1
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0xf2>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d123      	bne.n	8000e82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2107      	movs	r1, #7
 8000e66:	400b      	ands	r3, r1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	6939      	ldr	r1, [r7, #16]
 8000e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x17c>
 8000ec2:	e094      	b.n	8000fee <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <HAL_GPIO_Init+0x2c4>)
 8000ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <HAL_GPIO_Init+0x2c4>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_GPIO_Init+0x2c8>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1de>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a44      	ldr	r2, [pc, #272]	; (8001014 <HAL_GPIO_Init+0x2cc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1da>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a43      	ldr	r2, [pc, #268]	; (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1d6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a42      	ldr	r2, [pc, #264]	; (800101c <HAL_GPIO_Init+0x2d4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1d2>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f26:	2300      	movs	r3, #0
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2c8>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	025b      	lsls	r3, r3, #9
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	035b      	lsls	r3, r3, #13
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	039b      	lsls	r3, r3, #14
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e13      	subs	r3, r2, #0
 8000ffe:	d000      	beq.n	8001002 <HAL_GPIO_Init+0x2ba>
 8001000:	e6ae      	b.n	8000d60 <HAL_GPIO_Init+0x18>
  }
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b006      	add	sp, #24
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	50000400 	.word	0x50000400
 8001018:	50000800 	.word	0x50000800
 800101c:	50001c00 	.word	0x50001c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800103a:	e0b0      	b.n	800119e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800103c:	2201      	movs	r2, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	409a      	lsls	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_DeInit+0x2c>
 800104e:	e0a3      	b.n	8001198 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_GPIO_DeInit+0x190>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	589b      	ldr	r3, [r3, r2]
 800105c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2203      	movs	r2, #3
 8001062:	4013      	ands	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	409a      	lsls	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	429a      	cmp	r2, r3
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_DeInit+0x7e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_DeInit+0x194>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_DeInit+0x7a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_DeInit+0x198>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_DeInit+0x76>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_DeInit+0x19c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_DeInit+0x72>
 8001092:	2305      	movs	r3, #5
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_DeInit+0x80>
 8001096:	2306      	movs	r3, #6
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_DeInit+0x80>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_DeInit+0x80>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_DeInit+0x80>
 80010a2:	2300      	movs	r3, #0
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	2103      	movs	r1, #3
 80010a8:	400a      	ands	r2, r1
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d132      	bne.n	800111a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010be:	400a      	ands	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43d9      	mvns	r1, r3
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010da:	400a      	ands	r2, r1
 80010dc:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43d9      	mvns	r1, r3
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_GPIO_DeInit+0x1a0>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80010fc:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_GPIO_DeInit+0x190>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	589a      	ldr	r2, [r3, r2]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43d9      	mvns	r1, r3
 800110c:	4829      	ldr	r0, [pc, #164]	; (80011b4 <HAL_GPIO_DeInit+0x190>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	400a      	ands	r2, r1
 8001114:	3302      	adds	r3, #2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2103      	movs	r1, #3
 8001124:	4099      	lsls	r1, r3
 8001126:	000b      	movs	r3, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	58d3      	ldr	r3, [r2, r3]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	2107      	movs	r1, #7
 800113e:	400a      	ands	r2, r1
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	210f      	movs	r1, #15
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	43d1      	mvns	r1, r2
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	08d2      	lsrs	r2, r2, #3
 800114e:	4019      	ands	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	2103      	movs	r1, #3
 8001162:	4091      	lsls	r1, r2
 8001164:	000a      	movs	r2, r1
 8001166:	43d2      	mvns	r2, r2
 8001168:	401a      	ands	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2101      	movs	r1, #1
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4091      	lsls	r1, r2
 8001178:	000a      	movs	r2, r1
 800117a:	43d2      	mvns	r2, r2
 800117c:	401a      	ands	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	0052      	lsls	r2, r2, #1
 800118a:	2103      	movs	r1, #3
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
    }
    position++;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	40da      	lsrs	r2, r3
 80011a4:	1e13      	subs	r3, r2, #0
 80011a6:	d000      	beq.n	80011aa <HAL_GPIO_DeInit+0x186>
 80011a8:	e748      	b.n	800103c <HAL_GPIO_DeInit+0x18>
  }
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b006      	add	sp, #24
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	40010000 	.word	0x40010000
 80011b8:	50000400 	.word	0x50000400
 80011bc:	50000800 	.word	0x50000800
 80011c0:	50001c00 	.word	0x50001c00
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	0008      	movs	r0, r1
 80011d2:	0011      	movs	r1, r2
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	1c02      	adds	r2, r0, #0
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	1c7b      	adds	r3, r7, #1
 80011dc:	1c0a      	adds	r2, r1, #0
 80011de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	1c7b      	adds	r3, r7, #1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e8:	1cbb      	adds	r3, r7, #2
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011f2:	1cbb      	adds	r3, r7, #2
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	000a      	movs	r2, r1
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	1cb9      	adds	r1, r7, #2
 8001226:	8809      	ldrh	r1, [r1, #0]
 8001228:	400b      	ands	r3, r1
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b004      	add	sp, #16
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e082      	b.n	8001350 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2241      	movs	r2, #65	; 0x41
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d107      	bne.n	8001266 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff faf9 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2241      	movs	r2, #65	; 0x41
 800126a:	2124      	movs	r1, #36	; 0x24
 800126c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4934      	ldr	r1, [pc, #208]	; (8001358 <HAL_I2C_Init+0x120>)
 8001288:	400a      	ands	r2, r1
 800128a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4931      	ldr	r1, [pc, #196]	; (800135c <HAL_I2C_Init+0x124>)
 8001298:	400a      	ands	r2, r1
 800129a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0209      	lsls	r1, r1, #8
 80012b0:	430a      	orrs	r2, r1
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e007      	b.n	80012c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2184      	movs	r1, #132	; 0x84
 80012c0:	0209      	lsls	r1, r1, #8
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d104      	bne.n	80012d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	491f      	ldr	r1, [pc, #124]	; (8001360 <HAL_I2C_Init+0x128>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	491a      	ldr	r1, [pc, #104]	; (800135c <HAL_I2C_Init+0x124>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	431a      	orrs	r2, r3
 8001302:	0011      	movs	r1, r2
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	021a      	lsls	r2, r3, #8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69d9      	ldr	r1, [r3, #28]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2241      	movs	r2, #65	; 0x41
 800133c:	2120      	movs	r1, #32
 800133e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2242      	movs	r2, #66	; 0x42
 800134a:	2100      	movs	r1, #0
 800134c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}
 8001358:	f0ffffff 	.word	0xf0ffffff
 800135c:	ffff7fff 	.word	0xffff7fff
 8001360:	02008000 	.word	0x02008000

08001364 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e022      	b.n	80013bc <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2241      	movs	r2, #65	; 0x41
 800137a:	2124      	movs	r1, #36	; 0x24
 800137c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	438a      	bics	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff faa5 	bl	80008e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2241      	movs	r2, #65	; 0x41
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2242      	movs	r2, #66	; 0x42
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	1dbb      	adds	r3, r7, #6
 80013d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2241      	movs	r2, #65	; 0x41
 80013d8:	5c9b      	ldrb	r3, [r3, r2]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d000      	beq.n	80013e2 <HAL_I2C_Slave_Transmit+0x1e>
 80013e0:	e0fe      	b.n	80015e0 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_I2C_Slave_Transmit+0x2c>
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0f2      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_I2C_Slave_Transmit+0x46>
 8001406:	2302      	movs	r3, #2
 8001408:	e0eb      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001412:	f7ff fbb9 	bl	8000b88 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	2121      	movs	r1, #33	; 0x21
 8001420:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2242      	movs	r2, #66	; 0x42
 8001426:	2120      	movs	r1, #32
 8001428:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1dba      	adds	r2, r7, #6
 800143a:	8812      	ldrh	r2, [r2, #0]
 800143c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4967      	ldr	r1, [pc, #412]	; (80015ec <HAL_I2C_Slave_Transmit+0x228>)
 8001450:	400a      	ands	r2, r1
 8001452:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	0013      	movs	r3, r2
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	f000 f9f1 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	0209      	lsls	r1, r1, #8
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0b0      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d119      	bne.n	80014c4 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	0013      	movs	r3, r2
 800149a:	2200      	movs	r2, #0
 800149c:	2108      	movs	r1, #8
 800149e:	f000 f9d3 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d00a      	beq.n	80014bc <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0209      	lsls	r1, r1, #8
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e092      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	0259      	lsls	r1, r3, #9
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0013      	movs	r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	f000 f9b8 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d02f      	beq.n	800153c <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0209      	lsls	r1, r1, #8
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e077      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	6839      	ldr	r1, [r7, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 f9e4 	bl	80018c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d00a      	beq.n	8001518 <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0209      	lsls	r1, r1, #8
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e064      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1d5      	bne.n	80014f2 <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0018      	movs	r0, r3
 800154e:	f000 f9f9 	bl	8001944 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d012      	beq.n	800157c <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0209      	lsls	r1, r1, #8
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	2b04      	cmp	r3, #4
 800156e:	d103      	bne.n	8001578 <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
 8001576:	e001      	b.n	800157c <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	0219      	lsls	r1, r3, #8
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	0013      	movs	r3, r2
 8001592:	2201      	movs	r2, #1
 8001594:	f000 f958 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d00a      	beq.n	80015b2 <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	0209      	lsls	r1, r1, #8
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e017      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0209      	lsls	r1, r1, #8
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2241      	movs	r2, #65	; 0x41
 80015c8:	2120      	movs	r1, #32
 80015ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2242      	movs	r2, #66	; 0x42
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80015e0:	2302      	movs	r3, #2
  }
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b006      	add	sp, #24
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	ffff7fff 	.word	0xffff7fff

080015f0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2241      	movs	r2, #65	; 0x41
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b20      	cmp	r3, #32
 800160a:	d000      	beq.n	800160e <HAL_I2C_Slave_Receive+0x1e>
 800160c:	e0f3      	b.n	80017f6 <HAL_I2C_Slave_Receive+0x206>
  {
    if ((pData == NULL) || (Size == 0U))
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_I2C_Slave_Receive+0x2c>
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0e7      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2240      	movs	r2, #64	; 0x40
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Slave_Receive+0x46>
 8001632:	2302      	movs	r3, #2
 8001634:	e0e0      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800163e:	f7ff faa3 	bl	8000b88 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2241      	movs	r2, #65	; 0x41
 800164a:	2122      	movs	r1, #34	; 0x22
 800164c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2242      	movs	r2, #66	; 0x42
 8001652:	2120      	movs	r1, #32
 8001654:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1dba      	adds	r2, r7, #6
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4961      	ldr	r1, [pc, #388]	; (8001800 <HAL_I2C_Slave_Receive+0x210>)
 800167c:	400a      	ands	r2, r1
 800167e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	0013      	movs	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	2108      	movs	r1, #8
 800168e:	f000 f8db 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 8001692:	1e03      	subs	r3, r0, #0
 8001694:	d00a      	beq.n	80016ac <HAL_I2C_Slave_Receive+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0209      	lsls	r1, r1, #8
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0a5      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2208      	movs	r2, #8
 80016b2:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	0259      	lsls	r1, r3, #9
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	0013      	movs	r3, r2
 80016c2:	2201      	movs	r2, #1
 80016c4:	f000 f8c0 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d04a      	beq.n	8001762 <HAL_I2C_Slave_Receive+0x172>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0209      	lsls	r1, r1, #8
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e08a      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 f967 	bl	80019bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d024      	beq.n	800173c <HAL_I2C_Slave_Receive+0x14c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0209      	lsls	r1, r1, #8
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	2b04      	cmp	r3, #4
 8001710:	d112      	bne.n	8001738 <HAL_I2C_Slave_Receive+0x148>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e05d      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ba      	bne.n	80016e2 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8e6 	bl	8001944 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d00a      	beq.n	8001792 <HAL_I2C_Slave_Receive+0x1a2>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0209      	lsls	r1, r1, #8
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e032      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2220      	movs	r2, #32
 8001798:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	0219      	lsls	r1, r3, #8
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	0013      	movs	r3, r2
 80017a8:	2201      	movs	r2, #1
 80017aa:	f000 f84d 	bl	8001848 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d00a      	beq.n	80017c8 <HAL_I2C_Slave_Receive+0x1d8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0209      	lsls	r1, r1, #8
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e017      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0209      	lsls	r1, r1, #8
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2241      	movs	r2, #65	; 0x41
 80017de:	2120      	movs	r1, #32
 80017e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2242      	movs	r2, #66	; 0x42
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	2100      	movs	r1, #0
 80017f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_I2C_Slave_Receive+0x208>
  }
  else
  {
    return HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
  }
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b006      	add	sp, #24
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	ffff7fff 	.word	0xffff7fff

08001804 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d103      	bne.n	8001822 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	2b01      	cmp	r3, #1
 800182e:	d007      	beq.n	8001840 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2101      	movs	r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	619a      	str	r2, [r3, #24]
  }
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001858:	e021      	b.n	800189e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	d01e      	beq.n	800189e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001860:	f7ff f992 	bl	8000b88 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d302      	bcc.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d113      	bne.n	800189e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	2220      	movs	r2, #32
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2241      	movs	r2, #65	; 0x41
 8001886:	2120      	movs	r1, #32
 8001888:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2242      	movs	r2, #66	; 0x42
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4013      	ands	r3, r2
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	425a      	negs	r2, r3
 80018ae:	4153      	adcs	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	001a      	movs	r2, r3
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d0ce      	beq.n	800185a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b004      	add	sp, #16
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018d2:	e02b      	b.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f8da 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e029      	b.n	800193c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3301      	adds	r3, #1
 80018ec:	d01e      	beq.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff f94b 	bl	8000b88 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d113      	bne.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	2220      	movs	r2, #32
 800190a:	431a      	orrs	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2241      	movs	r2, #65	; 0x41
 8001914:	2120      	movs	r1, #32
 8001916:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2242      	movs	r2, #66	; 0x42
 800191c:	2100      	movs	r1, #0
 800191e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e007      	b.n	800193c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	2b02      	cmp	r3, #2
 8001938:	d1cc      	bne.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}

08001944 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001950:	e028      	b.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f89b 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e026      	b.n	80019b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff f90f 	bl	8000b88 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d113      	bne.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	2220      	movs	r2, #32
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2241      	movs	r2, #65	; 0x41
 800198c:	2120      	movs	r1, #32
 800198e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2242      	movs	r2, #66	; 0x42
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e007      	b.n	80019b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2220      	movs	r2, #32
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d1cf      	bne.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}

080019bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019c8:	e055      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f85f 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e053      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2220      	movs	r2, #32
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d129      	bne.n	8001a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d105      	bne.n	8001a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e03f      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	491d      	ldr	r1, [pc, #116]	; (8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2241      	movs	r2, #65	; 0x41
 8001a28:	2120      	movs	r1, #32
 8001a2a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2242      	movs	r2, #66	; 0x42
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e022      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a40:	f7ff f8a2 	bl	8000b88 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d302      	bcc.n	8001a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	2120      	movs	r1, #32
 8001a68:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	2100      	movs	r1, #0
 8001a70:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e007      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d1a2      	bne.n	80019ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	fe00e800 	.word	0xfe00e800

08001a94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d151      	bne.n	8001b52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aae:	e021      	b.n	8001af4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	d01e      	beq.n	8001af4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab6:	f7ff f867 	bl	8000b88 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <I2C_IsAcknowledgeFailed+0x38>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d113      	bne.n	8001af4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2241      	movs	r2, #65	; 0x41
 8001adc:	2120      	movs	r1, #32
 8001ade:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2242      	movs	r2, #66	; 0x42
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e02f      	b.n	8001b54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2220      	movs	r2, #32
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d1d6      	bne.n	8001ab0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2210      	movs	r2, #16
 8001b08:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fe75 	bl	8001804 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	490d      	ldr	r1, [pc, #52]	; (8001b5c <I2C_IsAcknowledgeFailed+0xc8>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	2204      	movs	r2, #4
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2241      	movs	r2, #65	; 0x41
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2242      	movs	r2, #66	; 0x42
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b004      	add	sp, #16
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	fe00e800 	.word	0xfe00e800

08001b60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2241      	movs	r2, #65	; 0x41
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d138      	bne.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e032      	b.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2101      	movs	r1, #1
 8001b8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2241      	movs	r2, #65	; 0x41
 8001b90:	2124      	movs	r1, #36	; 0x24
 8001b92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4911      	ldr	r1, [pc, #68]	; (8001bf4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2241      	movs	r2, #65	; 0x41
 8001bd8:	2120      	movs	r1, #32
 8001bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	ffffefff 	.word	0xffffefff

08001bf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2241      	movs	r2, #65	; 0x41
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d139      	bne.n	8001c82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2240      	movs	r2, #64	; 0x40
 8001c12:	5c9b      	ldrb	r3, [r3, r2]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e033      	b.n	8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2241      	movs	r2, #65	; 0x41
 8001c28:	2124      	movs	r1, #36	; 0x24
 8001c2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	438a      	bics	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2241      	movs	r2, #65	; 0x41
 8001c72:	2120      	movs	r1, #32
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	fffff0ff 	.word	0xfffff0ff

08001c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f000 fb70 	bl	8002384 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca4:	4bc9      	ldr	r3, [pc, #804]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cae:	4bc7      	ldr	r3, [pc, #796]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x36>
 8001cc4:	e07d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d007      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x68>
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	025b      	lsls	r3, r3, #9
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4bbb      	ldr	r3, [pc, #748]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x5a>
 8001ce8:	e06a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x130>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d166      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f000 fb46 	bl	8002384 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x84>
 8001d04:	4bb1      	ldr	r3, [pc, #708]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4bb0      	ldr	r3, [pc, #704]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0249      	lsls	r1, r1, #9
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e027      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10e      	bne.n	8001d3e <HAL_RCC_OscConfig+0xae>
 8001d20:	4baa      	ldr	r3, [pc, #680]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4ba9      	ldr	r3, [pc, #676]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	02c9      	lsls	r1, r1, #11
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4ba7      	ldr	r3, [pc, #668]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba6      	ldr	r3, [pc, #664]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0249      	lsls	r1, r1, #9
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e012      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d44:	49a2      	ldr	r1, [pc, #648]	; (8001fd0 <HAL_RCC_OscConfig+0x340>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4b9c      	ldr	r3, [pc, #624]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b9b      	ldr	r3, [pc, #620]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d5e:	499d      	ldr	r1, [pc, #628]	; (8001fd4 <HAL_RCC_OscConfig+0x344>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d014      	beq.n	8001d96 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff0c 	bl	8000b88 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7fe ff07 	bl	8000b88 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e2fd      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d88:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0xe6>
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fef7 	bl	8000b88 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fef2 	bl	8000b88 <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e2e8      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db2:	4b86      	ldr	r3, [pc, #536]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x110>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x13e>
 8001dcc:	e09a      	b.n	8001f04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b7a      	ldr	r3, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001de2:	2120      	movs	r1, #32
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	2220      	movs	r2, #32
 8001dec:	4393      	bics	r3, r2
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d13f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1ec>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_RCC_OscConfig+0x186>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e2b6      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a6f      	ldr	r2, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x348>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	021a      	lsls	r2, r3, #8
 8001e26:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2209      	movs	r2, #9
 8001e32:	4393      	bics	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 fbef 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8001e42:	0001      	movs	r1, r0
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x34c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	000a      	movs	r2, r1
 8001e54:	40da      	lsrs	r2, r3
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_OscConfig+0x350>)
 8001e58:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_RCC_OscConfig+0x354>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2513      	movs	r5, #19
 8001e60:	197c      	adds	r4, r7, r5
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7fe fe4a 	bl	8000afc <HAL_InitTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e6c:	197b      	adds	r3, r7, r5
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d047      	beq.n	8001f04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001e74:	2313      	movs	r3, #19
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	e283      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d027      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2209      	movs	r2, #9
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fe78 	bl	8000b88 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7fe fe73 	bl	8000b88 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e269      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f1      	beq.n	8001e9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x348>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e018      	b.n	8001f04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	438a      	bics	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fe53 	bl	8000b88 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fe4e 	bl	8000b88 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e244      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2204      	movs	r2, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d1f1      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_RCC_OscConfig+0x280>
 8001f0e:	e0a2      	b.n	8002056 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d141      	bne.n	8001f9a <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x29e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e22a      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x358>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	0a19      	lsrs	r1, r3, #8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	061a      	lsls	r2, r3, #24
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	0212      	lsls	r2, r2, #8
 8001f62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x34c>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x350>)
 8001f76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_OscConfig+0x354>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2513      	movs	r5, #19
 8001f7e:	197c      	adds	r4, r7, r5
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7fe fdbb 	bl	8000afc <HAL_InitTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f8a:	197b      	adds	r3, r7, r5
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d061      	beq.n	8002056 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001f92:	2313      	movs	r3, #19
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	e1f4      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03f      	beq.n	8002022 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0049      	lsls	r1, r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fdea 	bl	8000b88 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fb8:	e018      	b.n	8001fec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fba:	f7fe fde5 	bl	8000b88 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d911      	bls.n	8001fec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1db      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	ffffe0ff 	.word	0xffffe0ff
 8001fdc:	08003c78 	.word	0x08003c78
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fec:	4bca      	ldr	r3, [pc, #808]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0e0      	beq.n	8001fba <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff8:	4bc7      	ldr	r3, [pc, #796]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4ac7      	ldr	r2, [pc, #796]	; (800231c <HAL_RCC_OscConfig+0x68c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	4bc4      	ldr	r3, [pc, #784]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200c:	4bc2      	ldr	r3, [pc, #776]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	0a19      	lsrs	r1, r3, #8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	061a      	lsls	r2, r3, #24
 800201a:	4bbf      	ldr	r3, [pc, #764]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	e019      	b.n	8002056 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002022:	4bbd      	ldr	r3, [pc, #756]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4bbc      	ldr	r3, [pc, #752]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002028:	49bd      	ldr	r1, [pc, #756]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fdab 	bl	8000b88 <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002038:	f7fe fda6 	bl	8000b88 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e19c      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800204a:	4bb3      	ldr	r3, [pc, #716]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	4013      	ands	r3, r2
 800205e:	d036      	beq.n	80020ce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002068:	4bab      	ldr	r3, [pc, #684]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800206a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800206c:	4baa      	ldr	r3, [pc, #680]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe fd88 	bl	8000b88 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7fe fd83 	bl	8000b88 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e179      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002090:	4ba1      	ldr	r3, [pc, #644]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d0f1      	beq.n	800207e <HAL_RCC_OscConfig+0x3ee>
 800209a:	e018      	b.n	80020ce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800209e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fd6e 	bl	8000b88 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7fe fd69 	bl	8000b88 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e15f      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020c4:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d1f1      	bne.n	80020b2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x44a>
 80020d8:	e0af      	b.n	800223a <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2323      	movs	r3, #35	; 0x23
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	055b      	lsls	r3, r3, #21
 80020ea:	4013      	ands	r3, r2
 80020ec:	d10a      	bne.n	8002104 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b8a      	ldr	r3, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020fc:	2323      	movs	r3, #35	; 0x23
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b87      	ldr	r3, [pc, #540]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d11a      	bne.n	8002146 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002110:	4b84      	ldr	r3, [pc, #528]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b83      	ldr	r3, [pc, #524]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe fd33 	bl	8000b88 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fd2e 	bl	8000b88 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e124      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	429a      	cmp	r2, r3
 8002150:	d107      	bne.n	8002162 <HAL_RCC_OscConfig+0x4d2>
 8002152:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	4b70      	ldr	r3, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0049      	lsls	r1, r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	651a      	str	r2, [r3, #80]	; 0x50
 8002160:	e031      	b.n	80021c6 <HAL_RCC_OscConfig+0x536>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x4f4>
 800216a:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800216c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216e:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002170:	496b      	ldr	r1, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 8002172:	400a      	ands	r2, r1
 8002174:	651a      	str	r2, [r3, #80]	; 0x50
 8002176:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800217c:	496a      	ldr	r1, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x698>)
 800217e:	400a      	ands	r2, r1
 8002180:	651a      	str	r2, [r3, #80]	; 0x50
 8002182:	e020      	b.n	80021c6 <HAL_RCC_OscConfig+0x536>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	23a0      	movs	r3, #160	; 0xa0
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	429a      	cmp	r2, r3
 800218e:	d10e      	bne.n	80021ae <HAL_RCC_OscConfig+0x51e>
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002194:	4b60      	ldr	r3, [pc, #384]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	00c9      	lsls	r1, r1, #3
 800219a:	430a      	orrs	r2, r1
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
 800219e:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0049      	lsls	r1, r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	651a      	str	r2, [r3, #80]	; 0x50
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x536>
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b2:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021b4:	495a      	ldr	r1, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	651a      	str	r2, [r3, #80]	; 0x50
 80021ba:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021be:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021c0:	4959      	ldr	r1, [pc, #356]	; (8002328 <HAL_RCC_OscConfig+0x698>)
 80021c2:	400a      	ands	r2, r1
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fcdb 	bl	8000b88 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d6:	e009      	b.n	80021ec <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fcd6 	bl	8000b88 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x69c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0cb      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCC_OscConfig+0x548>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fcc5 	bl	8000b88 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002202:	e009      	b.n	8002218 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fcc0 	bl	8000b88 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x69c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0b5      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800221a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d1ef      	bne.n	8002204 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002224:	2323      	movs	r3, #35	; 0x23
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002234:	493e      	ldr	r1, [pc, #248]	; (8002330 <HAL_RCC_OscConfig+0x6a0>)
 8002236:	400a      	ands	r2, r1
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d100      	bne.n	8002244 <HAL_RCC_OscConfig+0x5b4>
 8002242:	e09e      	b.n	8002382 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x5bc>
 800224a:	e077      	b.n	800233c <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b02      	cmp	r3, #2
 8002252:	d145      	bne.n	80022e0 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800225a:	4936      	ldr	r1, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fc92 	bl	8000b88 <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fc8d 	bl	8000b88 <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e083      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	049b      	lsls	r3, r3, #18
 8002284:	4013      	ands	r3, r2
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x6a8>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	431a      	orrs	r2, r3
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0449      	lsls	r1, r1, #17
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fc67 	bl	8000b88 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fc62 	bl	8000b88 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e058      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049b      	lsls	r3, r3, #18
 80022da:	4013      	ands	r3, r2
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x630>
 80022de:	e050      	b.n	8002382 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022e6:	4913      	ldr	r1, [pc, #76]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe fc4c 	bl	8000b88 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fc47 	bl	8000b88 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e03d      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	049b      	lsls	r3, r3, #18
 8002310:	4013      	ands	r3, r2
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x666>
 8002314:	e035      	b.n	8002382 <HAL_RCC_OscConfig+0x6f2>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	ffff1fff 	.word	0xffff1fff
 8002320:	fffffeff 	.word	0xfffffeff
 8002324:	40007000 	.word	0x40007000
 8002328:	fffffbff 	.word	0xfffffbff
 800232c:	00001388 	.word	0x00001388
 8002330:	efffffff 	.word	0xefffffff
 8002334:	feffffff 	.word	0xfeffffff
 8002338:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x6fc>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	401a      	ands	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	429a      	cmp	r2, r3
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	23f0      	movs	r3, #240	; 0xf0
 8002362:	039b      	lsls	r3, r3, #14
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d107      	bne.n	800237e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	23c0      	movs	r3, #192	; 0xc0
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b00a      	add	sp, #40	; 0x28
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e129      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d91e      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b93      	ldr	r3, [pc, #588]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4393      	bics	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	4b90      	ldr	r3, [pc, #576]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fbe0 	bl	8000b88 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe fbdb 	bl	8000b88 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a8a      	ldr	r2, [pc, #552]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e10a      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b87      	ldr	r3, [pc, #540]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ee      	bne.n	80023ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fa:	4b83      	ldr	r3, [pc, #524]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	22f0      	movs	r2, #240	; 0xf0
 8002400:	4393      	bics	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d100      	bne.n	800241a <HAL_RCC_ClockConfig+0x8a>
 8002418:	e089      	b.n	800252e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002422:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	4013      	ands	r3, r2
 800242c:	d120      	bne.n	8002470 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0e2      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800243a:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d114      	bne.n	8002470 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0d6      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cb      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002460:	4b69      	ldr	r3, [pc, #420]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0c3      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2203      	movs	r2, #3
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fb80 	bl	8000b88 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d111      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002494:	e009      	b.n	80024aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002496:	f7fe fb77 	bl	8000b88 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0a6      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024aa:	4b57      	ldr	r3, [pc, #348]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	220c      	movs	r2, #12
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d1ef      	bne.n	8002496 <HAL_RCC_ClockConfig+0x106>
 80024b6:	e03a      	b.n	800252e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d111      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c2:	f7fe fb61 	bl	8000b88 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e090      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	220c      	movs	r2, #12
 80024dc:	4013      	ands	r3, r2
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d1ef      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x132>
 80024e2:	e024      	b.n	800252e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d11b      	bne.n	8002524 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ec:	e009      	b.n	8002502 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ee:	f7fe fb4b 	bl	8000b88 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	4a42      	ldr	r2, [pc, #264]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e07a      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	220c      	movs	r2, #12
 8002508:	4013      	ands	r3, r2
 800250a:	2b04      	cmp	r3, #4
 800250c:	d1ef      	bne.n	80024ee <HAL_RCC_ClockConfig+0x15e>
 800250e:	e00e      	b.n	800252e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fb3a 	bl	8000b88 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e069      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002524:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	220c      	movs	r2, #12
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d21e      	bcs.n	800257a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800254e:	f7fe fb1b 	bl	8000b88 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	e009      	b.n	800256c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fb16 	bl	8000b88 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_RCC_ClockConfig+0x274>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e045      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d1ee      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x27c>)
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	4013      	ands	r3, r2
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <HAL_RCC_ClockConfig+0x280>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b8:	f000 f832 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025bc:	0001      	movs	r1, r0
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	220f      	movs	r2, #15
 80025c6:	4013      	ands	r3, r2
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x284>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	000a      	movs	r2, r1
 80025ce:	40da      	lsrs	r2, r3
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCC_ClockConfig+0x288>)
 80025d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_ClockConfig+0x28c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	250b      	movs	r5, #11
 80025da:	197c      	adds	r4, r7, r5
 80025dc:	0018      	movs	r0, r3
 80025de:	f7fe fa8d 	bl	8000afc <HAL_InitTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025e6:	197b      	adds	r3, r7, r5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80025ee:	230b      	movs	r3, #11
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	40022000 	.word	0x40022000
 8002604:	00001388 	.word	0x00001388
 8002608:	40021000 	.word	0x40021000
 800260c:	fffff8ff 	.word	0xfffff8ff
 8002610:	ffffc7ff 	.word	0xffffc7ff
 8002614:	08003c78 	.word	0x08003c78
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b08f      	sub	sp, #60	; 0x3c
 8002624:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002626:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_RCC_GetSysClockFreq+0x130>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	230c      	movs	r3, #12
 8002630:	4013      	ands	r3, r2
 8002632:	2b08      	cmp	r3, #8
 8002634:	d00f      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x36>
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d010      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x3c>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d000      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x20>
 800263e:	e073      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002640:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_GetSysClockFreq+0x130>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_RCC_GetSysClockFreq+0x134>)
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800264e:	e079      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_GetSysClockFreq+0x138>)
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002654:	e076      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800265a:	e073      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	0c9a      	lsrs	r2, r3, #18
 8002660:	230f      	movs	r3, #15
 8002662:	401a      	ands	r2, r3
 8002664:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_GetSysClockFreq+0x140>)
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	0d9a      	lsrs	r2, r3, #22
 800266e:	2303      	movs	r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	3301      	adds	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_GetSysClockFreq+0x130>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	4013      	ands	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <HAL_RCC_GetSysClockFreq+0x13c>)
 800268c:	2300      	movs	r3, #0
 800268e:	69b8      	ldr	r0, [r7, #24]
 8002690:	69f9      	ldr	r1, [r7, #28]
 8002692:	f7fd fde5 	bl	8000260 <__aeabi_lmul>
 8002696:	0003      	movs	r3, r0
 8002698:	000c      	movs	r4, r1
 800269a:	0018      	movs	r0, r3
 800269c:	0021      	movs	r1, r4
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f7fd fdb9 	bl	8000220 <__aeabi_uldivmod>
 80026ae:	0003      	movs	r3, r0
 80026b0:	000c      	movs	r4, r1
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
 80026b4:	e035      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCC_GetSysClockFreq+0x130>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	4013      	ands	r3, r2
 80026be:	d019      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_RCC_GetSysClockFreq+0x134>)
 80026ca:	2300      	movs	r3, #0
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	f7fd fdc6 	bl	8000260 <__aeabi_lmul>
 80026d4:	0003      	movs	r3, r0
 80026d6:	000c      	movs	r4, r1
 80026d8:	0018      	movs	r0, r3
 80026da:	0021      	movs	r1, r4
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f7fd fd9a 	bl	8000220 <__aeabi_uldivmod>
 80026ec:	0003      	movs	r3, r0
 80026ee:	000c      	movs	r4, r1
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
 80026f2:	e016      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	0018      	movs	r0, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	0019      	movs	r1, r3
 80026fc:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_RCC_GetSysClockFreq+0x138>)
 80026fe:	2300      	movs	r3, #0
 8002700:	f7fd fdae 	bl	8000260 <__aeabi_lmul>
 8002704:	0003      	movs	r3, r0
 8002706:	000c      	movs	r4, r1
 8002708:	0018      	movs	r0, r3
 800270a:	0021      	movs	r1, r4
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	001d      	movs	r5, r3
 8002710:	2300      	movs	r3, #0
 8002712:	001e      	movs	r6, r3
 8002714:	002a      	movs	r2, r5
 8002716:	0033      	movs	r3, r6
 8002718:	f7fd fd82 	bl	8000220 <__aeabi_uldivmod>
 800271c:	0003      	movs	r3, r0
 800271e:	000c      	movs	r4, r1
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002726:	e00d      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_GetSysClockFreq+0x130>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0b5b      	lsrs	r3, r3, #13
 800272e:	2207      	movs	r2, #7
 8002730:	4013      	ands	r3, r2
 8002732:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	3301      	adds	r3, #1
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	0212      	lsls	r2, r2, #8
 800273c:	409a      	lsls	r2, r3
 800273e:	0013      	movs	r3, r2
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002742:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b00f      	add	sp, #60	; 0x3c
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	40021000 	.word	0x40021000
 8002754:	003d0900 	.word	0x003d0900
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200
 8002760:	08003c90 	.word	0x08003c90

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	0001      	movs	r1, r0
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	2207      	movs	r2, #7
 800278a:	4013      	ands	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	40d9      	lsrs	r1, r3
 8002792:	000b      	movs	r3, r1
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	40021000 	.word	0x40021000
 80027a0:	08003c88 	.word	0x08003c88

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	0001      	movs	r1, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	0adb      	lsrs	r3, r3, #11
 80027b4:	2207      	movs	r2, #7
 80027b6:	4013      	ands	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	40d9      	lsrs	r1, r3
 80027be:	000b      	movs	r3, r1
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003c88 	.word	0x08003c88

080027d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80027d8:	2317      	movs	r3, #23
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2220      	movs	r2, #32
 80027e6:	4013      	ands	r3, r2
 80027e8:	d100      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80027ea:	e0c3      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ec:	4b82      	ldr	r3, [pc, #520]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	055b      	lsls	r3, r3, #21
 80027f4:	4013      	ands	r3, r2
 80027f6:	d10a      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b7f      	ldr	r3, [pc, #508]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	0549      	lsls	r1, r1, #21
 8002802:	430a      	orrs	r2, r1
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4013      	ands	r3, r2
 8002818:	d11a      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281a:	4b78      	ldr	r3, [pc, #480]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0049      	lsls	r1, r1, #1
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002828:	f7fe f9ae 	bl	8000b88 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe f9a9 	bl	8000b88 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0d4      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4013      	ands	r3, r2
 800284e:	d0f0      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002850:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	23c0      	movs	r3, #192	; 0xc0
 8002856:	039b      	lsls	r3, r3, #14
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	23c0      	movs	r3, #192	; 0xc0
 8002862:	039b      	lsls	r3, r3, #14
 8002864:	4013      	ands	r3, r2
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d013      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	401a      	ands	r2, r3
 8002876:	23c0      	movs	r3, #192	; 0xc0
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	429a      	cmp	r2, r3
 800287c:	d10a      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	401a      	ands	r2, r3
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	429a      	cmp	r2, r3
 800288e:	d101      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0ac      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002894:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002898:	23c0      	movs	r3, #192	; 0xc0
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03b      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d033      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2220      	movs	r2, #32
 80028bc:	4013      	ands	r3, r2
 80028be:	d02e      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80028c0:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	4a4e      	ldr	r2, [pc, #312]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0309      	lsls	r1, r1, #12
 80028d4:	430a      	orrs	r2, r1
 80028d6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028de:	4949      	ldr	r1, [pc, #292]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80028e4:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	d014      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe f948 	bl	8000b88 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028fc:	e009      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe f943 	bl	8000b88 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a3f      	ldr	r2, [pc, #252]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e06d      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002912:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d0ef      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	23c0      	movs	r3, #192	; 0xc0
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	401a      	ands	r2, r3
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	429a      	cmp	r2, r3
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	23c0      	movs	r3, #192	; 0xc0
 8002940:	039b      	lsls	r3, r3, #14
 8002942:	401a      	ands	r2, r3
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800294c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	029b      	lsls	r3, r3, #10
 8002956:	401a      	ands	r2, r3
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800295a:	430a      	orrs	r2, r1
 800295c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800295e:	2317      	movs	r3, #23
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800296a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800296e:	4928      	ldr	r1, [pc, #160]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002970:	400a      	ands	r2, r1
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2202      	movs	r2, #2
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	220c      	movs	r2, #12
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800298e:	430a      	orrs	r2, r1
 8002990:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2208      	movs	r2, #8
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	4013      	ands	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b006      	add	sp, #24
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	fffcffff 	.word	0xfffcffff
 8002a04:	fff7ffff 	.word	0xfff7ffff
 8002a08:	00001388 	.word	0x00001388
 8002a0c:	ffcfffff 	.word	0xffcfffff
 8002a10:	efffffff 	.word	0xefffffff
 8002a14:	fffff3ff 	.word	0xfffff3ff
 8002a18:	ffffcfff 	.word	0xffffcfff
 8002a1c:	fff3ffff 	.word	0xfff3ffff

08002a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e044      	b.n	8002abc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2274      	movs	r2, #116	; 0x74
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fd ff75 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2224      	movs	r2, #36	; 0x24
 8002a4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 f8d8 	bl	8002c18 <UART_SetConfig>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e024      	b.n	8002abc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fb2d 	bl	80030dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	490d      	ldr	r1, [pc, #52]	; (8002ac4 <HAL_UART_Init+0xa4>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	212a      	movs	r1, #42	; 0x2a
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fbc5 	bl	8003244 <UART_CheckIdleState>
 8002aba:	0003      	movs	r3, r0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffffb7ff 	.word	0xffffb7ff

08002ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	1dbb      	adds	r3, r7, #6
 8002ad6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d000      	beq.n	8002ae2 <HAL_UART_Transmit+0x1a>
 8002ae0:	e095      	b.n	8002c0e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_UART_Transmit+0x28>
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e08d      	b.n	8002c10 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	015b      	lsls	r3, r3, #5
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d109      	bne.n	8002b14 <HAL_UART_Transmit+0x4c>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07d      	b.n	8002c10 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2274      	movs	r2, #116	; 0x74
 8002b18:	5c9b      	ldrb	r3, [r3, r2]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Transmit+0x5a>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e076      	b.n	8002c10 <HAL_UART_Transmit+0x148>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2274      	movs	r2, #116	; 0x74
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b38:	f7fe f826 	bl	8000b88 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1dba      	adds	r2, r7, #6
 8002b44:	2150      	movs	r1, #80	; 0x50
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1dba      	adds	r2, r7, #6
 8002b4e:	2152      	movs	r1, #82	; 0x52
 8002b50:	8812      	ldrh	r2, [r2, #0]
 8002b52:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d108      	bne.n	8002b72 <HAL_UART_Transmit+0xaa>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e003      	b.n	8002b7a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2274      	movs	r2, #116	; 0x74
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b82:	e02c      	b.n	8002bde <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	f000 fba1 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e038      	b.n	8002c10 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	05d2      	lsls	r2, r2, #23
 8002bb0:	0dd2      	lsrs	r2, r2, #23
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e007      	b.n	8002bcc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2252      	movs	r2, #82	; 0x52
 8002bd0:	5a9b      	ldrh	r3, [r3, r2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2252      	movs	r2, #82	; 0x52
 8002bdc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2252      	movs	r2, #82	; 0x52
 8002be2:	5a9b      	ldrh	r3, [r3, r2]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1cc      	bne.n	8002b84 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	f000 fb6e 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e005      	b.n	8002c10 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b008      	add	sp, #32
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c20:	231a      	movs	r3, #26
 8002c22:	2218      	movs	r2, #24
 8002c24:	4694      	mov	ip, r2
 8002c26:	44bc      	add	ip, r7
 8002c28:	4463      	add	r3, ip
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4aba      	ldr	r2, [pc, #744]	; (8002f38 <UART_SetConfig+0x320>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4ab6      	ldr	r2, [pc, #728]	; (8002f3c <UART_SetConfig+0x324>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4ab0      	ldr	r2, [pc, #704]	; (8002f40 <UART_SetConfig+0x328>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4aab      	ldr	r2, [pc, #684]	; (8002f44 <UART_SetConfig+0x32c>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4aa7      	ldr	r2, [pc, #668]	; (8002f48 <UART_SetConfig+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d137      	bne.n	8002d1e <UART_SetConfig+0x106>
 8002cae:	4ba7      	ldr	r3, [pc, #668]	; (8002f4c <UART_SetConfig+0x334>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d018      	beq.n	8002cec <UART_SetConfig+0xd4>
 8002cba:	d802      	bhi.n	8002cc2 <UART_SetConfig+0xaa>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <UART_SetConfig+0xb4>
 8002cc0:	e024      	b.n	8002d0c <UART_SetConfig+0xf4>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d00a      	beq.n	8002cdc <UART_SetConfig+0xc4>
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d018      	beq.n	8002cfc <UART_SetConfig+0xe4>
 8002cca:	e01f      	b.n	8002d0c <UART_SetConfig+0xf4>
 8002ccc:	231b      	movs	r3, #27
 8002cce:	2218      	movs	r2, #24
 8002cd0:	4694      	mov	ip, r2
 8002cd2:	44bc      	add	ip, r7
 8002cd4:	4463      	add	r3, ip
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e06e      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2218      	movs	r2, #24
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	44bc      	add	ip, r7
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e066      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002cec:	231b      	movs	r3, #27
 8002cee:	2218      	movs	r2, #24
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	44bc      	add	ip, r7
 8002cf4:	4463      	add	r3, ip
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e05e      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	4694      	mov	ip, r2
 8002d02:	44bc      	add	ip, r7
 8002d04:	4463      	add	r3, ip
 8002d06:	2208      	movs	r2, #8
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e056      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d0c:	231b      	movs	r3, #27
 8002d0e:	2218      	movs	r2, #24
 8002d10:	4694      	mov	ip, r2
 8002d12:	44bc      	add	ip, r7
 8002d14:	4463      	add	r3, ip
 8002d16:	2210      	movs	r2, #16
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	e04d      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a87      	ldr	r2, [pc, #540]	; (8002f40 <UART_SetConfig+0x328>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d141      	bne.n	8002dac <UART_SetConfig+0x194>
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <UART_SetConfig+0x334>)
 8002d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	4013      	ands	r3, r2
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	00d2      	lsls	r2, r2, #3
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <UART_SetConfig+0x162>
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	00d2      	lsls	r2, r2, #3
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <UART_SetConfig+0x130>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <UART_SetConfig+0x142>
 8002d46:	e028      	b.n	8002d9a <UART_SetConfig+0x182>
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00c      	beq.n	8002d6a <UART_SetConfig+0x152>
 8002d50:	22c0      	movs	r2, #192	; 0xc0
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <UART_SetConfig+0x172>
 8002d58:	e01f      	b.n	8002d9a <UART_SetConfig+0x182>
 8002d5a:	231b      	movs	r3, #27
 8002d5c:	2218      	movs	r2, #24
 8002d5e:	4694      	mov	ip, r2
 8002d60:	44bc      	add	ip, r7
 8002d62:	4463      	add	r3, ip
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e027      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d6a:	231b      	movs	r3, #27
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	4694      	mov	ip, r2
 8002d70:	44bc      	add	ip, r7
 8002d72:	4463      	add	r3, ip
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e01f      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d7a:	231b      	movs	r3, #27
 8002d7c:	2218      	movs	r2, #24
 8002d7e:	4694      	mov	ip, r2
 8002d80:	44bc      	add	ip, r7
 8002d82:	4463      	add	r3, ip
 8002d84:	2204      	movs	r2, #4
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e017      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d8a:	231b      	movs	r3, #27
 8002d8c:	2218      	movs	r2, #24
 8002d8e:	4694      	mov	ip, r2
 8002d90:	44bc      	add	ip, r7
 8002d92:	4463      	add	r3, ip
 8002d94:	2208      	movs	r2, #8
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e00f      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	2218      	movs	r2, #24
 8002d9e:	4694      	mov	ip, r2
 8002da0:	44bc      	add	ip, r7
 8002da2:	4463      	add	r3, ip
 8002da4:	2210      	movs	r2, #16
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	e006      	b.n	8002dba <UART_SetConfig+0x1a2>
 8002dac:	231b      	movs	r3, #27
 8002dae:	2218      	movs	r2, #24
 8002db0:	4694      	mov	ip, r2
 8002db2:	44bc      	add	ip, r7
 8002db4:	4463      	add	r3, ip
 8002db6:	2210      	movs	r2, #16
 8002db8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a60      	ldr	r2, [pc, #384]	; (8002f40 <UART_SetConfig+0x328>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d000      	beq.n	8002dc6 <UART_SetConfig+0x1ae>
 8002dc4:	e085      	b.n	8002ed2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dc6:	231b      	movs	r3, #27
 8002dc8:	2218      	movs	r2, #24
 8002dca:	4694      	mov	ip, r2
 8002dcc:	44bc      	add	ip, r7
 8002dce:	4463      	add	r3, ip
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d00d      	beq.n	8002df2 <UART_SetConfig+0x1da>
 8002dd6:	dc02      	bgt.n	8002dde <UART_SetConfig+0x1c6>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <UART_SetConfig+0x1d0>
 8002ddc:	e01d      	b.n	8002e1a <UART_SetConfig+0x202>
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d012      	beq.n	8002e08 <UART_SetConfig+0x1f0>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d015      	beq.n	8002e12 <UART_SetConfig+0x1fa>
 8002de6:	e018      	b.n	8002e1a <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7ff fcc6 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8002dec:	0003      	movs	r3, r0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df0:	e01d      	b.n	8002e2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <UART_SetConfig+0x334>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d002      	beq.n	8002e02 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dfc:	4b54      	ldr	r3, [pc, #336]	; (8002f50 <UART_SetConfig+0x338>)
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e00:	e015      	b.n	8002e2e <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 8002e02:	4b54      	ldr	r3, [pc, #336]	; (8002f54 <UART_SetConfig+0x33c>)
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e06:	e012      	b.n	8002e2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e08:	f7ff fc0a 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e10:	e00d      	b.n	8002e2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e18:	e009      	b.n	8002e2e <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e1e:	231a      	movs	r3, #26
 8002e20:	2218      	movs	r2, #24
 8002e22:	4694      	mov	ip, r2
 8002e24:	44bc      	add	ip, r7
 8002e26:	4463      	add	r3, ip
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
        break;
 8002e2c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <UART_SetConfig+0x21e>
 8002e34:	e138      	b.n	80030a8 <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d305      	bcc.n	8002e52 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d907      	bls.n	8002e62 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002e52:	231a      	movs	r3, #26
 8002e54:	2218      	movs	r2, #24
 8002e56:	4694      	mov	ip, r2
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4463      	add	r3, ip
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e122      	b.n	80030a8 <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	6939      	ldr	r1, [r7, #16]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	000b      	movs	r3, r1
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	0010      	movs	r0, r2
 8002e74:	0205      	lsls	r5, r0, #8
 8002e76:	431d      	orrs	r5, r3
 8002e78:	000b      	movs	r3, r1
 8002e7a:	021c      	lsls	r4, r3, #8
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68b8      	ldr	r0, [r7, #8]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	1900      	adds	r0, r0, r4
 8002e8e:	4169      	adcs	r1, r5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f7fd f9bf 	bl	8000220 <__aeabi_uldivmod>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	000c      	movs	r4, r1
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <UART_SetConfig+0x340>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d908      	bls.n	8002ec2 <UART_SetConfig+0x2aa>
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <UART_SetConfig+0x344>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d804      	bhi.n	8002ec2 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	e0f2      	b.n	80030a8 <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8002ec2:	231a      	movs	r3, #26
 8002ec4:	2218      	movs	r2, #24
 8002ec6:	4694      	mov	ip, r2
 8002ec8:	44bc      	add	ip, r7
 8002eca:	4463      	add	r3, ip
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e0ea      	b.n	80030a8 <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d000      	beq.n	8002ee0 <UART_SetConfig+0x2c8>
 8002ede:	e08a      	b.n	8002ff6 <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d839      	bhi.n	8002f64 <UART_SetConfig+0x34c>
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <UART_SetConfig+0x348>)
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efa:	f7ff fc3d 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8002efe:	0003      	movs	r3, r0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f02:	e039      	b.n	8002f78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff fc4e 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0c:	e034      	b.n	8002f78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <UART_SetConfig+0x334>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	4013      	ands	r3, r2
 8002f16:	d002      	beq.n	8002f1e <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <UART_SetConfig+0x338>)
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f1c:	e02c      	b.n	8002f78 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <UART_SetConfig+0x33c>)
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f22:	e029      	b.n	8002f78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f24:	f7ff fb7c 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f2c:	e024      	b.n	8002f78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f34:	e020      	b.n	8002f78 <UART_SetConfig+0x360>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	efff69f3 	.word	0xefff69f3
 8002f3c:	ffffcfff 	.word	0xffffcfff
 8002f40:	40004800 	.word	0x40004800
 8002f44:	fffff4ff 	.word	0xfffff4ff
 8002f48:	40004400 	.word	0x40004400
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	003d0900 	.word	0x003d0900
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	000002ff 	.word	0x000002ff
 8002f5c:	000fffff 	.word	0x000fffff
 8002f60:	08003c9c 	.word	0x08003c9c
      default:
        pclk = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f68:	231a      	movs	r3, #26
 8002f6a:	2218      	movs	r2, #24
 8002f6c:	4694      	mov	ip, r2
 8002f6e:	44bc      	add	ip, r7
 8002f70:	4463      	add	r3, ip
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d100      	bne.n	8002f80 <UART_SetConfig+0x368>
 8002f7e:	e093      	b.n	80030a8 <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	005a      	lsls	r2, r3, #1
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0019      	movs	r1, r3
 8002f92:	0010      	movs	r0, r2
 8002f94:	f7fd f8b8 	bl	8000108 <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d920      	bls.n	8002fe6 <UART_SetConfig+0x3ce>
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	4a48      	ldr	r2, [pc, #288]	; (80030c8 <UART_SetConfig+0x4b0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d81c      	bhi.n	8002fe6 <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	200e      	movs	r0, #14
 8002fb2:	2418      	movs	r4, #24
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	181b      	adds	r3, r3, r0
 8002fb8:	210f      	movs	r1, #15
 8002fba:	438a      	bics	r2, r1
 8002fbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	b299      	uxth	r1, r3
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	181b      	adds	r3, r3, r0
 8002fce:	193a      	adds	r2, r7, r4
 8002fd0:	1812      	adds	r2, r2, r0
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	193a      	adds	r2, r7, r4
 8002fde:	1812      	adds	r2, r2, r0
 8002fe0:	8812      	ldrh	r2, [r2, #0]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	e060      	b.n	80030a8 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe6:	231a      	movs	r3, #26
 8002fe8:	2218      	movs	r2, #24
 8002fea:	4694      	mov	ip, r2
 8002fec:	44bc      	add	ip, r7
 8002fee:	4463      	add	r3, ip
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e058      	b.n	80030a8 <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ff6:	231b      	movs	r3, #27
 8002ff8:	2218      	movs	r2, #24
 8002ffa:	4694      	mov	ip, r2
 8002ffc:	44bc      	add	ip, r7
 8002ffe:	4463      	add	r3, ip
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d822      	bhi.n	800304c <UART_SetConfig+0x434>
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <UART_SetConfig+0x4b4>)
 800300a:	18d3      	adds	r3, r2, r3
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff fbb2 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8003014:	0003      	movs	r3, r0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003018:	e022      	b.n	8003060 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800301a:	f7ff fbc3 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 800301e:	0003      	movs	r3, r0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003022:	e01d      	b.n	8003060 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <UART_SetConfig+0x4b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	4013      	ands	r3, r2
 800302c:	d002      	beq.n	8003034 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <UART_SetConfig+0x4bc>)
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003032:	e015      	b.n	8003060 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <UART_SetConfig+0x4c0>)
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003038:	e012      	b.n	8003060 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7ff faf1 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800303e:	0003      	movs	r3, r0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003042:	e00d      	b.n	8003060 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304a:	e009      	b.n	8003060 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003050:	231a      	movs	r3, #26
 8003052:	2218      	movs	r2, #24
 8003054:	4694      	mov	ip, r2
 8003056:	44bc      	add	ip, r7
 8003058:	4463      	add	r3, ip
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
        break;
 800305e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	085a      	lsrs	r2, r3, #1
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	18d2      	adds	r2, r2, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0019      	movs	r1, r3
 8003076:	0010      	movs	r0, r2
 8003078:	f7fd f846 	bl	8000108 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	b29b      	uxth	r3, r3
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d908      	bls.n	800309a <UART_SetConfig+0x482>
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <UART_SetConfig+0x4b0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d804      	bhi.n	800309a <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e006      	b.n	80030a8 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 800309a:	231a      	movs	r3, #26
 800309c:	2218      	movs	r2, #24
 800309e:	4694      	mov	ip, r2
 80030a0:	44bc      	add	ip, r7
 80030a2:	4463      	add	r3, ip
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2200      	movs	r2, #0
 80030b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b4:	231a      	movs	r3, #26
 80030b6:	2218      	movs	r2, #24
 80030b8:	4694      	mov	ip, r2
 80030ba:	44bc      	add	ip, r7
 80030bc:	4463      	add	r3, ip
 80030be:	781b      	ldrb	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b00e      	add	sp, #56	; 0x38
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	0000ffff 	.word	0x0000ffff
 80030cc:	08003cc0 	.word	0x08003cc0
 80030d0:	40021000 	.word	0x40021000
 80030d4:	003d0900 	.word	0x003d0900
 80030d8:	00f42400 	.word	0x00f42400

080030dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2201      	movs	r2, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00b      	beq.n	8003106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	; (8003220 <UART_AdvFeatureConfig+0x144>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2202      	movs	r2, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d00b      	beq.n	8003128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a43      	ldr	r2, [pc, #268]	; (8003224 <UART_AdvFeatureConfig+0x148>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2204      	movs	r2, #4
 800312e:	4013      	ands	r3, r2
 8003130:	d00b      	beq.n	800314a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <UART_AdvFeatureConfig+0x14c>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2208      	movs	r2, #8
 8003150:	4013      	ands	r3, r2
 8003152:	d00b      	beq.n	800316c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <UART_AdvFeatureConfig+0x150>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2210      	movs	r2, #16
 8003172:	4013      	ands	r3, r2
 8003174:	d00b      	beq.n	800318e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <UART_AdvFeatureConfig+0x154>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2220      	movs	r2, #32
 8003194:	4013      	ands	r3, r2
 8003196:	d00b      	beq.n	80031b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a25      	ldr	r2, [pc, #148]	; (8003234 <UART_AdvFeatureConfig+0x158>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	4013      	ands	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <UART_AdvFeatureConfig+0x15c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	035b      	lsls	r3, r3, #13
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10b      	bne.n	80031f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <UART_AdvFeatureConfig+0x160>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	4013      	ands	r3, r2
 80031fe:	d00b      	beq.n	8003218 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <UART_AdvFeatureConfig+0x164>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}
 8003220:	fffdffff 	.word	0xfffdffff
 8003224:	fffeffff 	.word	0xfffeffff
 8003228:	fffbffff 	.word	0xfffbffff
 800322c:	ffff7fff 	.word	0xffff7fff
 8003230:	ffffefff 	.word	0xffffefff
 8003234:	ffffdfff 	.word	0xffffdfff
 8003238:	ffefffff 	.word	0xffefffff
 800323c:	ff9fffff 	.word	0xff9fffff
 8003240:	fff7ffff 	.word	0xfff7ffff

08003244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	2100      	movs	r1, #0
 8003252:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003254:	f7fd fc98 	bl	8000b88 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2208      	movs	r2, #8
 8003264:	4013      	ands	r3, r2
 8003266:	2b08      	cmp	r3, #8
 8003268:	d10d      	bne.n	8003286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	0399      	lsls	r1, r3, #14
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <UART_CheckIdleState+0x90>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	0013      	movs	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	f000 f82d 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e022      	b.n	80032cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2204      	movs	r2, #4
 800328e:	4013      	ands	r3, r2
 8003290:	2b04      	cmp	r3, #4
 8003292:	d10d      	bne.n	80032b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	03d9      	lsls	r1, r3, #15
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <UART_CheckIdleState+0x90>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	0013      	movs	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	f000 f818 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d001      	beq.n	80032b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e00d      	b.n	80032cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2274      	movs	r2, #116	; 0x74
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	01ffffff 	.word	0x01ffffff

080032d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e8:	e05e      	b.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	3301      	adds	r3, #1
 80032ee:	d05b      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fd fc4a 	bl	8000b88 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11b      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	492f      	ldr	r1, [pc, #188]	; (80033d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003312:	400a      	ands	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2101      	movs	r1, #1
 8003322:	438a      	bics	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2274      	movs	r2, #116	; 0x74
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e044      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2204      	movs	r2, #4
 8003346:	4013      	ands	r3, r2
 8003348:	d02e      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	401a      	ands	r2, r3
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	429a      	cmp	r2, r3
 800335c:	d124      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4917      	ldr	r1, [pc, #92]	; (80033d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	438a      	bics	r2, r1
 8003386:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	2120      	movs	r1, #32
 800339a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2274      	movs	r2, #116	; 0x74
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e00f      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	425a      	negs	r2, r3
 80033b8:	4153      	adcs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	001a      	movs	r2, r3
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d091      	beq.n	80032ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fffffe5f 	.word	0xfffffe5f

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	2600      	movs	r6, #0
 80033f2:	f000 fc29 	bl	8003c48 <_init>
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	00b3      	lsls	r3, r6, #2
 8003406:	58eb      	ldr	r3, [r5, r3]
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	00b3      	lsls	r3, r6, #2
 8003410:	58eb      	ldr	r3, [r5, r3]
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003d20 	.word	0x08003d20
 800341c:	08003d20 	.word	0x08003d20
 8003420:	08003d20 	.word	0x08003d20
 8003424:	08003d24 	.word	0x08003d24

08003428 <memset>:
 8003428:	0003      	movs	r3, r0
 800342a:	1812      	adds	r2, r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	7019      	strb	r1, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <siprintf>:
 8003438:	b40e      	push	{r1, r2, r3}
 800343a:	b500      	push	{lr}
 800343c:	490b      	ldr	r1, [pc, #44]	; (800346c <siprintf+0x34>)
 800343e:	b09c      	sub	sp, #112	; 0x70
 8003440:	ab1d      	add	r3, sp, #116	; 0x74
 8003442:	9002      	str	r0, [sp, #8]
 8003444:	9006      	str	r0, [sp, #24]
 8003446:	9107      	str	r1, [sp, #28]
 8003448:	9104      	str	r1, [sp, #16]
 800344a:	4809      	ldr	r0, [pc, #36]	; (8003470 <siprintf+0x38>)
 800344c:	4909      	ldr	r1, [pc, #36]	; (8003474 <siprintf+0x3c>)
 800344e:	cb04      	ldmia	r3!, {r2}
 8003450:	9105      	str	r1, [sp, #20]
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	a902      	add	r1, sp, #8
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	f000 f870 	bl	800353c <_svfiprintf_r>
 800345c:	2300      	movs	r3, #0
 800345e:	9a02      	ldr	r2, [sp, #8]
 8003460:	7013      	strb	r3, [r2, #0]
 8003462:	b01c      	add	sp, #112	; 0x70
 8003464:	bc08      	pop	{r3}
 8003466:	b003      	add	sp, #12
 8003468:	4718      	bx	r3
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	7fffffff 	.word	0x7fffffff
 8003470:	2000000c 	.word	0x2000000c
 8003474:	ffff0208 	.word	0xffff0208

08003478 <__ssputs_r>:
 8003478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347a:	688e      	ldr	r6, [r1, #8]
 800347c:	b085      	sub	sp, #20
 800347e:	0007      	movs	r7, r0
 8003480:	000c      	movs	r4, r1
 8003482:	9203      	str	r2, [sp, #12]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	429e      	cmp	r6, r3
 8003488:	d83c      	bhi.n	8003504 <__ssputs_r+0x8c>
 800348a:	2390      	movs	r3, #144	; 0x90
 800348c:	898a      	ldrh	r2, [r1, #12]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	421a      	tst	r2, r3
 8003492:	d034      	beq.n	80034fe <__ssputs_r+0x86>
 8003494:	2503      	movs	r5, #3
 8003496:	6909      	ldr	r1, [r1, #16]
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	1a5b      	subs	r3, r3, r1
 800349c:	9302      	str	r3, [sp, #8]
 800349e:	6963      	ldr	r3, [r4, #20]
 80034a0:	9802      	ldr	r0, [sp, #8]
 80034a2:	435d      	muls	r5, r3
 80034a4:	0feb      	lsrs	r3, r5, #31
 80034a6:	195d      	adds	r5, r3, r5
 80034a8:	9b01      	ldr	r3, [sp, #4]
 80034aa:	106d      	asrs	r5, r5, #1
 80034ac:	3301      	adds	r3, #1
 80034ae:	181b      	adds	r3, r3, r0
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	d900      	bls.n	80034b6 <__ssputs_r+0x3e>
 80034b4:	001d      	movs	r5, r3
 80034b6:	0553      	lsls	r3, r2, #21
 80034b8:	d532      	bpl.n	8003520 <__ssputs_r+0xa8>
 80034ba:	0029      	movs	r1, r5
 80034bc:	0038      	movs	r0, r7
 80034be:	f000 fb23 	bl	8003b08 <_malloc_r>
 80034c2:	1e06      	subs	r6, r0, #0
 80034c4:	d109      	bne.n	80034da <__ssputs_r+0x62>
 80034c6:	230c      	movs	r3, #12
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	2340      	movs	r3, #64	; 0x40
 80034cc:	2001      	movs	r0, #1
 80034ce:	89a2      	ldrh	r2, [r4, #12]
 80034d0:	4240      	negs	r0, r0
 80034d2:	4313      	orrs	r3, r2
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	b005      	add	sp, #20
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034da:	9a02      	ldr	r2, [sp, #8]
 80034dc:	6921      	ldr	r1, [r4, #16]
 80034de:	f000 faac 	bl	8003a3a <memcpy>
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <__ssputs_r+0xc0>)
 80034e6:	401a      	ands	r2, r3
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	4313      	orrs	r3, r2
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	9b02      	ldr	r3, [sp, #8]
 80034f0:	6126      	str	r6, [r4, #16]
 80034f2:	18f6      	adds	r6, r6, r3
 80034f4:	6026      	str	r6, [r4, #0]
 80034f6:	6165      	str	r5, [r4, #20]
 80034f8:	9e01      	ldr	r6, [sp, #4]
 80034fa:	1aed      	subs	r5, r5, r3
 80034fc:	60a5      	str	r5, [r4, #8]
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	429e      	cmp	r6, r3
 8003502:	d900      	bls.n	8003506 <__ssputs_r+0x8e>
 8003504:	9e01      	ldr	r6, [sp, #4]
 8003506:	0032      	movs	r2, r6
 8003508:	9903      	ldr	r1, [sp, #12]
 800350a:	6820      	ldr	r0, [r4, #0]
 800350c:	f000 fa9e 	bl	8003a4c <memmove>
 8003510:	68a3      	ldr	r3, [r4, #8]
 8003512:	2000      	movs	r0, #0
 8003514:	1b9b      	subs	r3, r3, r6
 8003516:	60a3      	str	r3, [r4, #8]
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	199e      	adds	r6, r3, r6
 800351c:	6026      	str	r6, [r4, #0]
 800351e:	e7da      	b.n	80034d6 <__ssputs_r+0x5e>
 8003520:	002a      	movs	r2, r5
 8003522:	0038      	movs	r0, r7
 8003524:	f000 fb4e 	bl	8003bc4 <_realloc_r>
 8003528:	1e06      	subs	r6, r0, #0
 800352a:	d1e0      	bne.n	80034ee <__ssputs_r+0x76>
 800352c:	6921      	ldr	r1, [r4, #16]
 800352e:	0038      	movs	r0, r7
 8003530:	f000 faa0 	bl	8003a74 <_free_r>
 8003534:	e7c7      	b.n	80034c6 <__ssputs_r+0x4e>
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	fffffb7f 	.word	0xfffffb7f

0800353c <_svfiprintf_r>:
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b0a1      	sub	sp, #132	; 0x84
 8003540:	9003      	str	r0, [sp, #12]
 8003542:	001d      	movs	r5, r3
 8003544:	898b      	ldrh	r3, [r1, #12]
 8003546:	000f      	movs	r7, r1
 8003548:	0016      	movs	r6, r2
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	d511      	bpl.n	8003572 <_svfiprintf_r+0x36>
 800354e:	690b      	ldr	r3, [r1, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10e      	bne.n	8003572 <_svfiprintf_r+0x36>
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	f000 fad7 	bl	8003b08 <_malloc_r>
 800355a:	6038      	str	r0, [r7, #0]
 800355c:	6138      	str	r0, [r7, #16]
 800355e:	2800      	cmp	r0, #0
 8003560:	d105      	bne.n	800356e <_svfiprintf_r+0x32>
 8003562:	230c      	movs	r3, #12
 8003564:	9a03      	ldr	r2, [sp, #12]
 8003566:	3801      	subs	r0, #1
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	b021      	add	sp, #132	; 0x84
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356e:	2340      	movs	r3, #64	; 0x40
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	2300      	movs	r3, #0
 8003574:	ac08      	add	r4, sp, #32
 8003576:	6163      	str	r3, [r4, #20]
 8003578:	3320      	adds	r3, #32
 800357a:	7663      	strb	r3, [r4, #25]
 800357c:	3310      	adds	r3, #16
 800357e:	76a3      	strb	r3, [r4, #26]
 8003580:	9507      	str	r5, [sp, #28]
 8003582:	0035      	movs	r5, r6
 8003584:	782b      	ldrb	r3, [r5, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <_svfiprintf_r+0x52>
 800358a:	2b25      	cmp	r3, #37	; 0x25
 800358c:	d146      	bne.n	800361c <_svfiprintf_r+0xe0>
 800358e:	1bab      	subs	r3, r5, r6
 8003590:	9305      	str	r3, [sp, #20]
 8003592:	d00c      	beq.n	80035ae <_svfiprintf_r+0x72>
 8003594:	0032      	movs	r2, r6
 8003596:	0039      	movs	r1, r7
 8003598:	9803      	ldr	r0, [sp, #12]
 800359a:	f7ff ff6d 	bl	8003478 <__ssputs_r>
 800359e:	1c43      	adds	r3, r0, #1
 80035a0:	d100      	bne.n	80035a4 <_svfiprintf_r+0x68>
 80035a2:	e0ae      	b.n	8003702 <_svfiprintf_r+0x1c6>
 80035a4:	6962      	ldr	r2, [r4, #20]
 80035a6:	9b05      	ldr	r3, [sp, #20]
 80035a8:	4694      	mov	ip, r2
 80035aa:	4463      	add	r3, ip
 80035ac:	6163      	str	r3, [r4, #20]
 80035ae:	782b      	ldrb	r3, [r5, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d100      	bne.n	80035b6 <_svfiprintf_r+0x7a>
 80035b4:	e0a5      	b.n	8003702 <_svfiprintf_r+0x1c6>
 80035b6:	2201      	movs	r2, #1
 80035b8:	2300      	movs	r3, #0
 80035ba:	4252      	negs	r2, r2
 80035bc:	6062      	str	r2, [r4, #4]
 80035be:	a904      	add	r1, sp, #16
 80035c0:	3254      	adds	r2, #84	; 0x54
 80035c2:	1852      	adds	r2, r2, r1
 80035c4:	1c6e      	adds	r6, r5, #1
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	60e3      	str	r3, [r4, #12]
 80035ca:	60a3      	str	r3, [r4, #8]
 80035cc:	7013      	strb	r3, [r2, #0]
 80035ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80035d0:	7831      	ldrb	r1, [r6, #0]
 80035d2:	2205      	movs	r2, #5
 80035d4:	4853      	ldr	r0, [pc, #332]	; (8003724 <_svfiprintf_r+0x1e8>)
 80035d6:	f000 fa25 	bl	8003a24 <memchr>
 80035da:	1c75      	adds	r5, r6, #1
 80035dc:	2800      	cmp	r0, #0
 80035de:	d11f      	bne.n	8003620 <_svfiprintf_r+0xe4>
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	06d3      	lsls	r3, r2, #27
 80035e4:	d504      	bpl.n	80035f0 <_svfiprintf_r+0xb4>
 80035e6:	2353      	movs	r3, #83	; 0x53
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	185b      	adds	r3, r3, r1
 80035ec:	2120      	movs	r1, #32
 80035ee:	7019      	strb	r1, [r3, #0]
 80035f0:	0713      	lsls	r3, r2, #28
 80035f2:	d504      	bpl.n	80035fe <_svfiprintf_r+0xc2>
 80035f4:	2353      	movs	r3, #83	; 0x53
 80035f6:	a904      	add	r1, sp, #16
 80035f8:	185b      	adds	r3, r3, r1
 80035fa:	212b      	movs	r1, #43	; 0x2b
 80035fc:	7019      	strb	r1, [r3, #0]
 80035fe:	7833      	ldrb	r3, [r6, #0]
 8003600:	2b2a      	cmp	r3, #42	; 0x2a
 8003602:	d016      	beq.n	8003632 <_svfiprintf_r+0xf6>
 8003604:	0035      	movs	r5, r6
 8003606:	2100      	movs	r1, #0
 8003608:	200a      	movs	r0, #10
 800360a:	68e3      	ldr	r3, [r4, #12]
 800360c:	782a      	ldrb	r2, [r5, #0]
 800360e:	1c6e      	adds	r6, r5, #1
 8003610:	3a30      	subs	r2, #48	; 0x30
 8003612:	2a09      	cmp	r2, #9
 8003614:	d94e      	bls.n	80036b4 <_svfiprintf_r+0x178>
 8003616:	2900      	cmp	r1, #0
 8003618:	d018      	beq.n	800364c <_svfiprintf_r+0x110>
 800361a:	e010      	b.n	800363e <_svfiprintf_r+0x102>
 800361c:	3501      	adds	r5, #1
 800361e:	e7b1      	b.n	8003584 <_svfiprintf_r+0x48>
 8003620:	4b40      	ldr	r3, [pc, #256]	; (8003724 <_svfiprintf_r+0x1e8>)
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	1ac0      	subs	r0, r0, r3
 8003626:	2301      	movs	r3, #1
 8003628:	4083      	lsls	r3, r0
 800362a:	4313      	orrs	r3, r2
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	002e      	movs	r6, r5
 8003630:	e7ce      	b.n	80035d0 <_svfiprintf_r+0x94>
 8003632:	9b07      	ldr	r3, [sp, #28]
 8003634:	1d19      	adds	r1, r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	9107      	str	r1, [sp, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db01      	blt.n	8003642 <_svfiprintf_r+0x106>
 800363e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003640:	e004      	b.n	800364c <_svfiprintf_r+0x110>
 8003642:	425b      	negs	r3, r3
 8003644:	60e3      	str	r3, [r4, #12]
 8003646:	2302      	movs	r3, #2
 8003648:	4313      	orrs	r3, r2
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	782b      	ldrb	r3, [r5, #0]
 800364e:	2b2e      	cmp	r3, #46	; 0x2e
 8003650:	d10a      	bne.n	8003668 <_svfiprintf_r+0x12c>
 8003652:	786b      	ldrb	r3, [r5, #1]
 8003654:	2b2a      	cmp	r3, #42	; 0x2a
 8003656:	d135      	bne.n	80036c4 <_svfiprintf_r+0x188>
 8003658:	9b07      	ldr	r3, [sp, #28]
 800365a:	3502      	adds	r5, #2
 800365c:	1d1a      	adds	r2, r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	9207      	str	r2, [sp, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db2b      	blt.n	80036be <_svfiprintf_r+0x182>
 8003666:	9309      	str	r3, [sp, #36]	; 0x24
 8003668:	4e2f      	ldr	r6, [pc, #188]	; (8003728 <_svfiprintf_r+0x1ec>)
 800366a:	7829      	ldrb	r1, [r5, #0]
 800366c:	2203      	movs	r2, #3
 800366e:	0030      	movs	r0, r6
 8003670:	f000 f9d8 	bl	8003a24 <memchr>
 8003674:	2800      	cmp	r0, #0
 8003676:	d006      	beq.n	8003686 <_svfiprintf_r+0x14a>
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	1b80      	subs	r0, r0, r6
 800367c:	4083      	lsls	r3, r0
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	3501      	adds	r5, #1
 8003682:	4313      	orrs	r3, r2
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	7829      	ldrb	r1, [r5, #0]
 8003688:	2206      	movs	r2, #6
 800368a:	4828      	ldr	r0, [pc, #160]	; (800372c <_svfiprintf_r+0x1f0>)
 800368c:	1c6e      	adds	r6, r5, #1
 800368e:	7621      	strb	r1, [r4, #24]
 8003690:	f000 f9c8 	bl	8003a24 <memchr>
 8003694:	2800      	cmp	r0, #0
 8003696:	d03c      	beq.n	8003712 <_svfiprintf_r+0x1d6>
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <_svfiprintf_r+0x1f4>)
 800369a:	2b00      	cmp	r3, #0
 800369c:	d125      	bne.n	80036ea <_svfiprintf_r+0x1ae>
 800369e:	2207      	movs	r2, #7
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	3307      	adds	r3, #7
 80036a4:	4393      	bics	r3, r2
 80036a6:	3308      	adds	r3, #8
 80036a8:	9307      	str	r3, [sp, #28]
 80036aa:	6963      	ldr	r3, [r4, #20]
 80036ac:	9a04      	ldr	r2, [sp, #16]
 80036ae:	189b      	adds	r3, r3, r2
 80036b0:	6163      	str	r3, [r4, #20]
 80036b2:	e766      	b.n	8003582 <_svfiprintf_r+0x46>
 80036b4:	4343      	muls	r3, r0
 80036b6:	2101      	movs	r1, #1
 80036b8:	189b      	adds	r3, r3, r2
 80036ba:	0035      	movs	r5, r6
 80036bc:	e7a6      	b.n	800360c <_svfiprintf_r+0xd0>
 80036be:	2301      	movs	r3, #1
 80036c0:	425b      	negs	r3, r3
 80036c2:	e7d0      	b.n	8003666 <_svfiprintf_r+0x12a>
 80036c4:	2300      	movs	r3, #0
 80036c6:	200a      	movs	r0, #10
 80036c8:	001a      	movs	r2, r3
 80036ca:	3501      	adds	r5, #1
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	7829      	ldrb	r1, [r5, #0]
 80036d0:	1c6e      	adds	r6, r5, #1
 80036d2:	3930      	subs	r1, #48	; 0x30
 80036d4:	2909      	cmp	r1, #9
 80036d6:	d903      	bls.n	80036e0 <_svfiprintf_r+0x1a4>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0c5      	beq.n	8003668 <_svfiprintf_r+0x12c>
 80036dc:	9209      	str	r2, [sp, #36]	; 0x24
 80036de:	e7c3      	b.n	8003668 <_svfiprintf_r+0x12c>
 80036e0:	4342      	muls	r2, r0
 80036e2:	2301      	movs	r3, #1
 80036e4:	1852      	adds	r2, r2, r1
 80036e6:	0035      	movs	r5, r6
 80036e8:	e7f1      	b.n	80036ce <_svfiprintf_r+0x192>
 80036ea:	ab07      	add	r3, sp, #28
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	003a      	movs	r2, r7
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <_svfiprintf_r+0x1f8>)
 80036f2:	0021      	movs	r1, r4
 80036f4:	9803      	ldr	r0, [sp, #12]
 80036f6:	e000      	b.n	80036fa <_svfiprintf_r+0x1be>
 80036f8:	bf00      	nop
 80036fa:	9004      	str	r0, [sp, #16]
 80036fc:	9b04      	ldr	r3, [sp, #16]
 80036fe:	3301      	adds	r3, #1
 8003700:	d1d3      	bne.n	80036aa <_svfiprintf_r+0x16e>
 8003702:	89bb      	ldrh	r3, [r7, #12]
 8003704:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003706:	065b      	lsls	r3, r3, #25
 8003708:	d400      	bmi.n	800370c <_svfiprintf_r+0x1d0>
 800370a:	e72e      	b.n	800356a <_svfiprintf_r+0x2e>
 800370c:	2001      	movs	r0, #1
 800370e:	4240      	negs	r0, r0
 8003710:	e72b      	b.n	800356a <_svfiprintf_r+0x2e>
 8003712:	ab07      	add	r3, sp, #28
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	003a      	movs	r2, r7
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <_svfiprintf_r+0x1f8>)
 800371a:	0021      	movs	r1, r4
 800371c:	9803      	ldr	r0, [sp, #12]
 800371e:	f000 f879 	bl	8003814 <_printf_i>
 8003722:	e7ea      	b.n	80036fa <_svfiprintf_r+0x1be>
 8003724:	08003ce4 	.word	0x08003ce4
 8003728:	08003cea 	.word	0x08003cea
 800372c:	08003cee 	.word	0x08003cee
 8003730:	00000000 	.word	0x00000000
 8003734:	08003479 	.word	0x08003479

08003738 <_printf_common>:
 8003738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800373a:	0015      	movs	r5, r2
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	688a      	ldr	r2, [r1, #8]
 8003740:	690b      	ldr	r3, [r1, #16]
 8003742:	9000      	str	r0, [sp, #0]
 8003744:	000c      	movs	r4, r1
 8003746:	4293      	cmp	r3, r2
 8003748:	da00      	bge.n	800374c <_printf_common+0x14>
 800374a:	0013      	movs	r3, r2
 800374c:	0022      	movs	r2, r4
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	3243      	adds	r2, #67	; 0x43
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	2a00      	cmp	r2, #0
 8003756:	d001      	beq.n	800375c <_printf_common+0x24>
 8003758:	3301      	adds	r3, #1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	d502      	bpl.n	8003768 <_printf_common+0x30>
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	3302      	adds	r3, #2
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	2706      	movs	r7, #6
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	401f      	ands	r7, r3
 800376e:	d027      	beq.n	80037c0 <_printf_common+0x88>
 8003770:	0023      	movs	r3, r4
 8003772:	3343      	adds	r3, #67	; 0x43
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	4193      	sbcs	r3, r2
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	0692      	lsls	r2, r2, #26
 800377e:	d430      	bmi.n	80037e2 <_printf_common+0xaa>
 8003780:	0022      	movs	r2, r4
 8003782:	9901      	ldr	r1, [sp, #4]
 8003784:	3243      	adds	r2, #67	; 0x43
 8003786:	9800      	ldr	r0, [sp, #0]
 8003788:	9e08      	ldr	r6, [sp, #32]
 800378a:	47b0      	blx	r6
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d025      	beq.n	80037dc <_printf_common+0xa4>
 8003790:	2306      	movs	r3, #6
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	682a      	ldr	r2, [r5, #0]
 8003796:	68e1      	ldr	r1, [r4, #12]
 8003798:	4003      	ands	r3, r0
 800379a:	2500      	movs	r5, #0
 800379c:	2b04      	cmp	r3, #4
 800379e:	d103      	bne.n	80037a8 <_printf_common+0x70>
 80037a0:	1a8d      	subs	r5, r1, r2
 80037a2:	43eb      	mvns	r3, r5
 80037a4:	17db      	asrs	r3, r3, #31
 80037a6:	401d      	ands	r5, r3
 80037a8:	68a3      	ldr	r3, [r4, #8]
 80037aa:	6922      	ldr	r2, [r4, #16]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	dd01      	ble.n	80037b4 <_printf_common+0x7c>
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	18ed      	adds	r5, r5, r3
 80037b4:	2700      	movs	r7, #0
 80037b6:	42bd      	cmp	r5, r7
 80037b8:	d120      	bne.n	80037fc <_printf_common+0xc4>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e010      	b.n	80037e0 <_printf_common+0xa8>
 80037be:	3701      	adds	r7, #1
 80037c0:	68e3      	ldr	r3, [r4, #12]
 80037c2:	682a      	ldr	r2, [r5, #0]
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	42bb      	cmp	r3, r7
 80037c8:	ddd2      	ble.n	8003770 <_printf_common+0x38>
 80037ca:	0022      	movs	r2, r4
 80037cc:	2301      	movs	r3, #1
 80037ce:	3219      	adds	r2, #25
 80037d0:	9901      	ldr	r1, [sp, #4]
 80037d2:	9800      	ldr	r0, [sp, #0]
 80037d4:	9e08      	ldr	r6, [sp, #32]
 80037d6:	47b0      	blx	r6
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d1f0      	bne.n	80037be <_printf_common+0x86>
 80037dc:	2001      	movs	r0, #1
 80037de:	4240      	negs	r0, r0
 80037e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037e2:	2030      	movs	r0, #48	; 0x30
 80037e4:	18e1      	adds	r1, r4, r3
 80037e6:	3143      	adds	r1, #67	; 0x43
 80037e8:	7008      	strb	r0, [r1, #0]
 80037ea:	0021      	movs	r1, r4
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	3145      	adds	r1, #69	; 0x45
 80037f0:	7809      	ldrb	r1, [r1, #0]
 80037f2:	18a2      	adds	r2, r4, r2
 80037f4:	3243      	adds	r2, #67	; 0x43
 80037f6:	3302      	adds	r3, #2
 80037f8:	7011      	strb	r1, [r2, #0]
 80037fa:	e7c1      	b.n	8003780 <_printf_common+0x48>
 80037fc:	0022      	movs	r2, r4
 80037fe:	2301      	movs	r3, #1
 8003800:	321a      	adds	r2, #26
 8003802:	9901      	ldr	r1, [sp, #4]
 8003804:	9800      	ldr	r0, [sp, #0]
 8003806:	9e08      	ldr	r6, [sp, #32]
 8003808:	47b0      	blx	r6
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d0e6      	beq.n	80037dc <_printf_common+0xa4>
 800380e:	3701      	adds	r7, #1
 8003810:	e7d1      	b.n	80037b6 <_printf_common+0x7e>
	...

08003814 <_printf_i>:
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	9204      	str	r2, [sp, #16]
 800381a:	000a      	movs	r2, r1
 800381c:	3243      	adds	r2, #67	; 0x43
 800381e:	9305      	str	r3, [sp, #20]
 8003820:	9003      	str	r0, [sp, #12]
 8003822:	9202      	str	r2, [sp, #8]
 8003824:	7e0a      	ldrb	r2, [r1, #24]
 8003826:	000c      	movs	r4, r1
 8003828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800382a:	2a6e      	cmp	r2, #110	; 0x6e
 800382c:	d100      	bne.n	8003830 <_printf_i+0x1c>
 800382e:	e086      	b.n	800393e <_printf_i+0x12a>
 8003830:	d81f      	bhi.n	8003872 <_printf_i+0x5e>
 8003832:	2a63      	cmp	r2, #99	; 0x63
 8003834:	d033      	beq.n	800389e <_printf_i+0x8a>
 8003836:	d808      	bhi.n	800384a <_printf_i+0x36>
 8003838:	2a00      	cmp	r2, #0
 800383a:	d100      	bne.n	800383e <_printf_i+0x2a>
 800383c:	e08c      	b.n	8003958 <_printf_i+0x144>
 800383e:	2a58      	cmp	r2, #88	; 0x58
 8003840:	d04d      	beq.n	80038de <_printf_i+0xca>
 8003842:	0025      	movs	r5, r4
 8003844:	3542      	adds	r5, #66	; 0x42
 8003846:	702a      	strb	r2, [r5, #0]
 8003848:	e030      	b.n	80038ac <_printf_i+0x98>
 800384a:	2a64      	cmp	r2, #100	; 0x64
 800384c:	d001      	beq.n	8003852 <_printf_i+0x3e>
 800384e:	2a69      	cmp	r2, #105	; 0x69
 8003850:	d1f7      	bne.n	8003842 <_printf_i+0x2e>
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	1d0a      	adds	r2, r1, #4
 8003858:	0628      	lsls	r0, r5, #24
 800385a:	d529      	bpl.n	80038b0 <_printf_i+0x9c>
 800385c:	6808      	ldr	r0, [r1, #0]
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	2800      	cmp	r0, #0
 8003862:	da03      	bge.n	800386c <_printf_i+0x58>
 8003864:	232d      	movs	r3, #45	; 0x2d
 8003866:	9a02      	ldr	r2, [sp, #8]
 8003868:	4240      	negs	r0, r0
 800386a:	7013      	strb	r3, [r2, #0]
 800386c:	4e6b      	ldr	r6, [pc, #428]	; (8003a1c <_printf_i+0x208>)
 800386e:	270a      	movs	r7, #10
 8003870:	e04f      	b.n	8003912 <_printf_i+0xfe>
 8003872:	2a73      	cmp	r2, #115	; 0x73
 8003874:	d074      	beq.n	8003960 <_printf_i+0x14c>
 8003876:	d808      	bhi.n	800388a <_printf_i+0x76>
 8003878:	2a6f      	cmp	r2, #111	; 0x6f
 800387a:	d01f      	beq.n	80038bc <_printf_i+0xa8>
 800387c:	2a70      	cmp	r2, #112	; 0x70
 800387e:	d1e0      	bne.n	8003842 <_printf_i+0x2e>
 8003880:	2220      	movs	r2, #32
 8003882:	6809      	ldr	r1, [r1, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	6022      	str	r2, [r4, #0]
 8003888:	e003      	b.n	8003892 <_printf_i+0x7e>
 800388a:	2a75      	cmp	r2, #117	; 0x75
 800388c:	d016      	beq.n	80038bc <_printf_i+0xa8>
 800388e:	2a78      	cmp	r2, #120	; 0x78
 8003890:	d1d7      	bne.n	8003842 <_printf_i+0x2e>
 8003892:	0022      	movs	r2, r4
 8003894:	2178      	movs	r1, #120	; 0x78
 8003896:	3245      	adds	r2, #69	; 0x45
 8003898:	7011      	strb	r1, [r2, #0]
 800389a:	4e61      	ldr	r6, [pc, #388]	; (8003a20 <_printf_i+0x20c>)
 800389c:	e022      	b.n	80038e4 <_printf_i+0xd0>
 800389e:	0025      	movs	r5, r4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	3542      	adds	r5, #66	; 0x42
 80038a4:	1d11      	adds	r1, r2, #4
 80038a6:	6019      	str	r1, [r3, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	702b      	strb	r3, [r5, #0]
 80038ac:	2301      	movs	r3, #1
 80038ae:	e065      	b.n	800397c <_printf_i+0x168>
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	0669      	lsls	r1, r5, #25
 80038b6:	d5d3      	bpl.n	8003860 <_printf_i+0x4c>
 80038b8:	b200      	sxth	r0, r0
 80038ba:	e7d1      	b.n	8003860 <_printf_i+0x4c>
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	6825      	ldr	r5, [r4, #0]
 80038c0:	1d08      	adds	r0, r1, #4
 80038c2:	6018      	str	r0, [r3, #0]
 80038c4:	6808      	ldr	r0, [r1, #0]
 80038c6:	062e      	lsls	r6, r5, #24
 80038c8:	d505      	bpl.n	80038d6 <_printf_i+0xc2>
 80038ca:	4e54      	ldr	r6, [pc, #336]	; (8003a1c <_printf_i+0x208>)
 80038cc:	2708      	movs	r7, #8
 80038ce:	2a6f      	cmp	r2, #111	; 0x6f
 80038d0:	d01b      	beq.n	800390a <_printf_i+0xf6>
 80038d2:	270a      	movs	r7, #10
 80038d4:	e019      	b.n	800390a <_printf_i+0xf6>
 80038d6:	066d      	lsls	r5, r5, #25
 80038d8:	d5f7      	bpl.n	80038ca <_printf_i+0xb6>
 80038da:	b280      	uxth	r0, r0
 80038dc:	e7f5      	b.n	80038ca <_printf_i+0xb6>
 80038de:	3145      	adds	r1, #69	; 0x45
 80038e0:	4e4e      	ldr	r6, [pc, #312]	; (8003a1c <_printf_i+0x208>)
 80038e2:	700a      	strb	r2, [r1, #0]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	1d01      	adds	r1, r0, #4
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	0615      	lsls	r5, r2, #24
 80038f0:	d521      	bpl.n	8003936 <_printf_i+0x122>
 80038f2:	07d3      	lsls	r3, r2, #31
 80038f4:	d502      	bpl.n	80038fc <_printf_i+0xe8>
 80038f6:	2320      	movs	r3, #32
 80038f8:	431a      	orrs	r2, r3
 80038fa:	6022      	str	r2, [r4, #0]
 80038fc:	2710      	movs	r7, #16
 80038fe:	2800      	cmp	r0, #0
 8003900:	d103      	bne.n	800390a <_printf_i+0xf6>
 8003902:	2320      	movs	r3, #32
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	439a      	bics	r2, r3
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	0023      	movs	r3, r4
 800390c:	2200      	movs	r2, #0
 800390e:	3343      	adds	r3, #67	; 0x43
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	60a3      	str	r3, [r4, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db58      	blt.n	80039cc <_printf_i+0x1b8>
 800391a:	2204      	movs	r2, #4
 800391c:	6821      	ldr	r1, [r4, #0]
 800391e:	4391      	bics	r1, r2
 8003920:	6021      	str	r1, [r4, #0]
 8003922:	2800      	cmp	r0, #0
 8003924:	d154      	bne.n	80039d0 <_printf_i+0x1bc>
 8003926:	9d02      	ldr	r5, [sp, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05a      	beq.n	80039e2 <_printf_i+0x1ce>
 800392c:	0025      	movs	r5, r4
 800392e:	7833      	ldrb	r3, [r6, #0]
 8003930:	3542      	adds	r5, #66	; 0x42
 8003932:	702b      	strb	r3, [r5, #0]
 8003934:	e055      	b.n	80039e2 <_printf_i+0x1ce>
 8003936:	0655      	lsls	r5, r2, #25
 8003938:	d5db      	bpl.n	80038f2 <_printf_i+0xde>
 800393a:	b280      	uxth	r0, r0
 800393c:	e7d9      	b.n	80038f2 <_printf_i+0xde>
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	680d      	ldr	r5, [r1, #0]
 8003942:	1d10      	adds	r0, r2, #4
 8003944:	6949      	ldr	r1, [r1, #20]
 8003946:	6018      	str	r0, [r3, #0]
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	062e      	lsls	r6, r5, #24
 800394c:	d501      	bpl.n	8003952 <_printf_i+0x13e>
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	e002      	b.n	8003958 <_printf_i+0x144>
 8003952:	066d      	lsls	r5, r5, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0x13a>
 8003956:	8019      	strh	r1, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	9d02      	ldr	r5, [sp, #8]
 800395c:	6123      	str	r3, [r4, #16]
 800395e:	e04f      	b.n	8003a00 <_printf_i+0x1ec>
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	1d11      	adds	r1, r2, #4
 8003964:	6019      	str	r1, [r3, #0]
 8003966:	6815      	ldr	r5, [r2, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	6862      	ldr	r2, [r4, #4]
 800396c:	0028      	movs	r0, r5
 800396e:	f000 f859 	bl	8003a24 <memchr>
 8003972:	2800      	cmp	r0, #0
 8003974:	d001      	beq.n	800397a <_printf_i+0x166>
 8003976:	1b40      	subs	r0, r0, r5
 8003978:	6060      	str	r0, [r4, #4]
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	2300      	movs	r3, #0
 8003980:	9a02      	ldr	r2, [sp, #8]
 8003982:	7013      	strb	r3, [r2, #0]
 8003984:	e03c      	b.n	8003a00 <_printf_i+0x1ec>
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	002a      	movs	r2, r5
 800398a:	9904      	ldr	r1, [sp, #16]
 800398c:	9803      	ldr	r0, [sp, #12]
 800398e:	9d05      	ldr	r5, [sp, #20]
 8003990:	47a8      	blx	r5
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d03e      	beq.n	8003a14 <_printf_i+0x200>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	d415      	bmi.n	80039c8 <_printf_i+0x1b4>
 800399c:	9b07      	ldr	r3, [sp, #28]
 800399e:	68e0      	ldr	r0, [r4, #12]
 80039a0:	4298      	cmp	r0, r3
 80039a2:	da39      	bge.n	8003a18 <_printf_i+0x204>
 80039a4:	0018      	movs	r0, r3
 80039a6:	e037      	b.n	8003a18 <_printf_i+0x204>
 80039a8:	0022      	movs	r2, r4
 80039aa:	2301      	movs	r3, #1
 80039ac:	3219      	adds	r2, #25
 80039ae:	9904      	ldr	r1, [sp, #16]
 80039b0:	9803      	ldr	r0, [sp, #12]
 80039b2:	9e05      	ldr	r6, [sp, #20]
 80039b4:	47b0      	blx	r6
 80039b6:	1c43      	adds	r3, r0, #1
 80039b8:	d02c      	beq.n	8003a14 <_printf_i+0x200>
 80039ba:	3501      	adds	r5, #1
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	42ab      	cmp	r3, r5
 80039c4:	dcf0      	bgt.n	80039a8 <_printf_i+0x194>
 80039c6:	e7e9      	b.n	800399c <_printf_i+0x188>
 80039c8:	2500      	movs	r5, #0
 80039ca:	e7f7      	b.n	80039bc <_printf_i+0x1a8>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0ad      	beq.n	800392c <_printf_i+0x118>
 80039d0:	9d02      	ldr	r5, [sp, #8]
 80039d2:	0039      	movs	r1, r7
 80039d4:	f7fc fc1e 	bl	8000214 <__aeabi_uidivmod>
 80039d8:	5c73      	ldrb	r3, [r6, r1]
 80039da:	3d01      	subs	r5, #1
 80039dc:	702b      	strb	r3, [r5, #0]
 80039de:	2800      	cmp	r0, #0
 80039e0:	d1f7      	bne.n	80039d2 <_printf_i+0x1be>
 80039e2:	2f08      	cmp	r7, #8
 80039e4:	d109      	bne.n	80039fa <_printf_i+0x1e6>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	07db      	lsls	r3, r3, #31
 80039ea:	d506      	bpl.n	80039fa <_printf_i+0x1e6>
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	6922      	ldr	r2, [r4, #16]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	dc02      	bgt.n	80039fa <_printf_i+0x1e6>
 80039f4:	2330      	movs	r3, #48	; 0x30
 80039f6:	3d01      	subs	r5, #1
 80039f8:	702b      	strb	r3, [r5, #0]
 80039fa:	9b02      	ldr	r3, [sp, #8]
 80039fc:	1b5b      	subs	r3, r3, r5
 80039fe:	6123      	str	r3, [r4, #16]
 8003a00:	9b05      	ldr	r3, [sp, #20]
 8003a02:	aa07      	add	r2, sp, #28
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	0021      	movs	r1, r4
 8003a08:	9b04      	ldr	r3, [sp, #16]
 8003a0a:	9803      	ldr	r0, [sp, #12]
 8003a0c:	f7ff fe94 	bl	8003738 <_printf_common>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d1b8      	bne.n	8003986 <_printf_i+0x172>
 8003a14:	2001      	movs	r0, #1
 8003a16:	4240      	negs	r0, r0
 8003a18:	b009      	add	sp, #36	; 0x24
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	08003cf5 	.word	0x08003cf5
 8003a20:	08003d06 	.word	0x08003d06

08003a24 <memchr>:
 8003a24:	b2c9      	uxtb	r1, r1
 8003a26:	1882      	adds	r2, r0, r2
 8003a28:	4290      	cmp	r0, r2
 8003a2a:	d101      	bne.n	8003a30 <memchr+0xc>
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	4770      	bx	lr
 8003a30:	7803      	ldrb	r3, [r0, #0]
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d0fb      	beq.n	8003a2e <memchr+0xa>
 8003a36:	3001      	adds	r0, #1
 8003a38:	e7f6      	b.n	8003a28 <memchr+0x4>

08003a3a <memcpy>:
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d100      	bne.n	8003a44 <memcpy+0xa>
 8003a42:	bd10      	pop	{r4, pc}
 8003a44:	5ccc      	ldrb	r4, [r1, r3]
 8003a46:	54c4      	strb	r4, [r0, r3]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	e7f8      	b.n	8003a3e <memcpy+0x4>

08003a4c <memmove>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4288      	cmp	r0, r1
 8003a50:	d902      	bls.n	8003a58 <memmove+0xc>
 8003a52:	188b      	adds	r3, r1, r2
 8003a54:	4298      	cmp	r0, r3
 8003a56:	d303      	bcc.n	8003a60 <memmove+0x14>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e007      	b.n	8003a6c <memmove+0x20>
 8003a5c:	5c8b      	ldrb	r3, [r1, r2]
 8003a5e:	5483      	strb	r3, [r0, r2]
 8003a60:	3a01      	subs	r2, #1
 8003a62:	d2fb      	bcs.n	8003a5c <memmove+0x10>
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	5ccc      	ldrb	r4, [r1, r3]
 8003a68:	54c4      	strb	r4, [r0, r3]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1fa      	bne.n	8003a66 <memmove+0x1a>
 8003a70:	e7f8      	b.n	8003a64 <memmove+0x18>
	...

08003a74 <_free_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	0005      	movs	r5, r0
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d010      	beq.n	8003a9e <_free_r+0x2a>
 8003a7c:	1f0c      	subs	r4, r1, #4
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da00      	bge.n	8003a86 <_free_r+0x12>
 8003a84:	18e4      	adds	r4, r4, r3
 8003a86:	0028      	movs	r0, r5
 8003a88:	f000 f8d4 	bl	8003c34 <__malloc_lock>
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <_free_r+0x90>)
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <_free_r+0x2c>
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6014      	str	r4, [r2, #0]
 8003a98:	0028      	movs	r0, r5
 8003a9a:	f000 f8cc 	bl	8003c36 <__malloc_unlock>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d909      	bls.n	8003ab8 <_free_r+0x44>
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	1860      	adds	r0, r4, r1
 8003aa8:	4283      	cmp	r3, r0
 8003aaa:	d1f3      	bne.n	8003a94 <_free_r+0x20>
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	1841      	adds	r1, r0, r1
 8003ab2:	6021      	str	r1, [r4, #0]
 8003ab4:	e7ee      	b.n	8003a94 <_free_r+0x20>
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d001      	beq.n	8003ac2 <_free_r+0x4e>
 8003abe:	42a2      	cmp	r2, r4
 8003ac0:	d9f9      	bls.n	8003ab6 <_free_r+0x42>
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	1858      	adds	r0, r3, r1
 8003ac6:	42a0      	cmp	r0, r4
 8003ac8:	d10b      	bne.n	8003ae2 <_free_r+0x6e>
 8003aca:	6820      	ldr	r0, [r4, #0]
 8003acc:	1809      	adds	r1, r1, r0
 8003ace:	1858      	adds	r0, r3, r1
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	4282      	cmp	r2, r0
 8003ad4:	d1e0      	bne.n	8003a98 <_free_r+0x24>
 8003ad6:	6810      	ldr	r0, [r2, #0]
 8003ad8:	6852      	ldr	r2, [r2, #4]
 8003ada:	1841      	adds	r1, r0, r1
 8003adc:	6019      	str	r1, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	e7da      	b.n	8003a98 <_free_r+0x24>
 8003ae2:	42a0      	cmp	r0, r4
 8003ae4:	d902      	bls.n	8003aec <_free_r+0x78>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	e7d5      	b.n	8003a98 <_free_r+0x24>
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	1860      	adds	r0, r4, r1
 8003af0:	4282      	cmp	r2, r0
 8003af2:	d103      	bne.n	8003afc <_free_r+0x88>
 8003af4:	6810      	ldr	r0, [r2, #0]
 8003af6:	6852      	ldr	r2, [r2, #4]
 8003af8:	1841      	adds	r1, r0, r1
 8003afa:	6021      	str	r1, [r4, #0]
 8003afc:	6062      	str	r2, [r4, #4]
 8003afe:	605c      	str	r4, [r3, #4]
 8003b00:	e7ca      	b.n	8003a98 <_free_r+0x24>
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	20000090 	.word	0x20000090

08003b08 <_malloc_r>:
 8003b08:	2303      	movs	r3, #3
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	1ccd      	adds	r5, r1, #3
 8003b0e:	439d      	bics	r5, r3
 8003b10:	3508      	adds	r5, #8
 8003b12:	0006      	movs	r6, r0
 8003b14:	2d0c      	cmp	r5, #12
 8003b16:	d21e      	bcs.n	8003b56 <_malloc_r+0x4e>
 8003b18:	250c      	movs	r5, #12
 8003b1a:	42a9      	cmp	r1, r5
 8003b1c:	d81d      	bhi.n	8003b5a <_malloc_r+0x52>
 8003b1e:	0030      	movs	r0, r6
 8003b20:	f000 f888 	bl	8003c34 <__malloc_lock>
 8003b24:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <_malloc_r+0xb4>)
 8003b26:	6814      	ldr	r4, [r2, #0]
 8003b28:	0021      	movs	r1, r4
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d119      	bne.n	8003b62 <_malloc_r+0x5a>
 8003b2e:	4c24      	ldr	r4, [pc, #144]	; (8003bc0 <_malloc_r+0xb8>)
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <_malloc_r+0x36>
 8003b36:	0030      	movs	r0, r6
 8003b38:	f000 f86a 	bl	8003c10 <_sbrk_r>
 8003b3c:	6020      	str	r0, [r4, #0]
 8003b3e:	0029      	movs	r1, r5
 8003b40:	0030      	movs	r0, r6
 8003b42:	f000 f865 	bl	8003c10 <_sbrk_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0x9a>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	0030      	movs	r0, r6
 8003b4e:	6033      	str	r3, [r6, #0]
 8003b50:	f000 f871 	bl	8003c36 <__malloc_unlock>
 8003b54:	e003      	b.n	8003b5e <_malloc_r+0x56>
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	dadf      	bge.n	8003b1a <_malloc_r+0x12>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	2000      	movs	r0, #0
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
 8003b62:	680b      	ldr	r3, [r1, #0]
 8003b64:	1b5b      	subs	r3, r3, r5
 8003b66:	d419      	bmi.n	8003b9c <_malloc_r+0x94>
 8003b68:	2b0b      	cmp	r3, #11
 8003b6a:	d903      	bls.n	8003b74 <_malloc_r+0x6c>
 8003b6c:	600b      	str	r3, [r1, #0]
 8003b6e:	18cc      	adds	r4, r1, r3
 8003b70:	6025      	str	r5, [r4, #0]
 8003b72:	e003      	b.n	8003b7c <_malloc_r+0x74>
 8003b74:	684b      	ldr	r3, [r1, #4]
 8003b76:	428c      	cmp	r4, r1
 8003b78:	d10d      	bne.n	8003b96 <_malloc_r+0x8e>
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	0030      	movs	r0, r6
 8003b7e:	f000 f85a 	bl	8003c36 <__malloc_unlock>
 8003b82:	0020      	movs	r0, r4
 8003b84:	2207      	movs	r2, #7
 8003b86:	300b      	adds	r0, #11
 8003b88:	1d23      	adds	r3, r4, #4
 8003b8a:	4390      	bics	r0, r2
 8003b8c:	1ac3      	subs	r3, r0, r3
 8003b8e:	d0e7      	beq.n	8003b60 <_malloc_r+0x58>
 8003b90:	425a      	negs	r2, r3
 8003b92:	50e2      	str	r2, [r4, r3]
 8003b94:	e7e4      	b.n	8003b60 <_malloc_r+0x58>
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	000c      	movs	r4, r1
 8003b9a:	e7ef      	b.n	8003b7c <_malloc_r+0x74>
 8003b9c:	000c      	movs	r4, r1
 8003b9e:	6849      	ldr	r1, [r1, #4]
 8003ba0:	e7c3      	b.n	8003b2a <_malloc_r+0x22>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	1cc4      	adds	r4, r0, #3
 8003ba6:	439c      	bics	r4, r3
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d0e1      	beq.n	8003b70 <_malloc_r+0x68>
 8003bac:	1a21      	subs	r1, r4, r0
 8003bae:	0030      	movs	r0, r6
 8003bb0:	f000 f82e 	bl	8003c10 <_sbrk_r>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d1db      	bne.n	8003b70 <_malloc_r+0x68>
 8003bb8:	e7c7      	b.n	8003b4a <_malloc_r+0x42>
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000090 	.word	0x20000090
 8003bc0:	20000094 	.word	0x20000094

08003bc4 <_realloc_r>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	0007      	movs	r7, r0
 8003bc8:	000d      	movs	r5, r1
 8003bca:	0016      	movs	r6, r2
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d105      	bne.n	8003bdc <_realloc_r+0x18>
 8003bd0:	0011      	movs	r1, r2
 8003bd2:	f7ff ff99 	bl	8003b08 <_malloc_r>
 8003bd6:	0004      	movs	r4, r0
 8003bd8:	0020      	movs	r0, r4
 8003bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bdc:	2a00      	cmp	r2, #0
 8003bde:	d103      	bne.n	8003be8 <_realloc_r+0x24>
 8003be0:	f7ff ff48 	bl	8003a74 <_free_r>
 8003be4:	0034      	movs	r4, r6
 8003be6:	e7f7      	b.n	8003bd8 <_realloc_r+0x14>
 8003be8:	f000 f826 	bl	8003c38 <_malloc_usable_size_r>
 8003bec:	002c      	movs	r4, r5
 8003bee:	42b0      	cmp	r0, r6
 8003bf0:	d2f2      	bcs.n	8003bd8 <_realloc_r+0x14>
 8003bf2:	0031      	movs	r1, r6
 8003bf4:	0038      	movs	r0, r7
 8003bf6:	f7ff ff87 	bl	8003b08 <_malloc_r>
 8003bfa:	1e04      	subs	r4, r0, #0
 8003bfc:	d0ec      	beq.n	8003bd8 <_realloc_r+0x14>
 8003bfe:	0029      	movs	r1, r5
 8003c00:	0032      	movs	r2, r6
 8003c02:	f7ff ff1a 	bl	8003a3a <memcpy>
 8003c06:	0029      	movs	r1, r5
 8003c08:	0038      	movs	r0, r7
 8003c0a:	f7ff ff33 	bl	8003a74 <_free_r>
 8003c0e:	e7e3      	b.n	8003bd8 <_realloc_r+0x14>

08003c10 <_sbrk_r>:
 8003c10:	2300      	movs	r3, #0
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	4c06      	ldr	r4, [pc, #24]	; (8003c30 <_sbrk_r+0x20>)
 8003c16:	0005      	movs	r5, r0
 8003c18:	0008      	movs	r0, r1
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	f7fc fee8 	bl	80009f0 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d103      	bne.n	8003c2c <_sbrk_r+0x1c>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d000      	beq.n	8003c2c <_sbrk_r+0x1c>
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000190 	.word	0x20000190

08003c34 <__malloc_lock>:
 8003c34:	4770      	bx	lr

08003c36 <__malloc_unlock>:
 8003c36:	4770      	bx	lr

08003c38 <_malloc_usable_size_r>:
 8003c38:	1f0b      	subs	r3, r1, #4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1f18      	subs	r0, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da01      	bge.n	8003c46 <_malloc_usable_size_r+0xe>
 8003c42:	580b      	ldr	r3, [r1, r0]
 8003c44:	18c0      	adds	r0, r0, r3
 8003c46:	4770      	bx	lr

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
